{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"contabilidad Sencilla aplicaci\u00f3n de contabilidad para llevar las cuentas personales, desarrollada en Django y Bulma. Basado en los principios b\u00e1sicos de contabilidad (e.g. utilizando asientos de 2 o m\u00e1s movimientos para entrar los movimientos de dinero de una cuenta a otra), esta peque\u00f1a aplicaci\u00f3n permite hacer un seguimiento de los gastos personales. Una vez entrados los gastos, se podr\u00e1n sacar informes de movimientos por cuenta, o grupos de cuentas. Los informes no est\u00e1n todav\u00eda implementados.","title":"Inicio"},{"location":"#contabilidad","text":"Sencilla aplicaci\u00f3n de contabilidad para llevar las cuentas personales, desarrollada en Django y Bulma. Basado en los principios b\u00e1sicos de contabilidad (e.g. utilizando asientos de 2 o m\u00e1s movimientos para entrar los movimientos de dinero de una cuenta a otra), esta peque\u00f1a aplicaci\u00f3n permite hacer un seguimiento de los gastos personales. Una vez entrados los gastos, se podr\u00e1n sacar informes de movimientos por cuenta, o grupos de cuentas. Los informes no est\u00e1n todav\u00eda implementados.","title":"contabilidad"},{"location":"acerca_de/","text":"Licencia Este proyecto utiliza la licencia de MIT. Para su desarrollo he utilizado varias librer\u00edas o frameworks, que detallo a continuaci\u00f3n: Django : framework de desarrollo de sitios web basado en python. Facilita la creaci\u00f3n de un sitio web con una base de datos. Bulma : framework moderno de CSS. OpenPyXL : librer\u00eda para manipular ficheros excel, utilizados para cargar datos (cuentas y asientos). pandas : librer\u00eda m\u00e1s potente para la manipulaci\u00f3n y extracci\u00f3n de datos de un fichero excel. WebTest : permite realizar tests m\u00e1s precisos de un entorno web, m\u00e1s all\u00e1 del est\u00e1ndar proporcionado por django. Coverage : paquete para analizar los tests realizados. Detecta qu\u00e9 partes del c\u00f3digo han sido testeadas, y qu\u00e9 partes no han sido. MkDocs : paquete para la generaci\u00f3n y mantenimiento de documentaci\u00f3n.","title":"Acerca de"},{"location":"acerca_de/#licencia","text":"Este proyecto utiliza la licencia de MIT. Para su desarrollo he utilizado varias librer\u00edas o frameworks, que detallo a continuaci\u00f3n: Django : framework de desarrollo de sitios web basado en python. Facilita la creaci\u00f3n de un sitio web con una base de datos. Bulma : framework moderno de CSS. OpenPyXL : librer\u00eda para manipular ficheros excel, utilizados para cargar datos (cuentas y asientos). pandas : librer\u00eda m\u00e1s potente para la manipulaci\u00f3n y extracci\u00f3n de datos de un fichero excel. WebTest : permite realizar tests m\u00e1s precisos de un entorno web, m\u00e1s all\u00e1 del est\u00e1ndar proporcionado por django. Coverage : paquete para analizar los tests realizados. Detecta qu\u00e9 partes del c\u00f3digo han sido testeadas, y qu\u00e9 partes no han sido. MkDocs : paquete para la generaci\u00f3n y mantenimiento de documentaci\u00f3n.","title":"Licencia"},{"location":"empezando/","text":"Instalaci\u00f3n Esta es una aplicaci\u00f3n web, desarrollada utilizando el framewrok de Django . Por tanto, para ejecutarla necesitas ponerla en un servidor web. En la documentaci\u00f3n de Django, en el apartado de Deployment podr\u00e1s encontrar m\u00e1s detalles sobre c\u00f3mo hacerlo. En cualquier caso, puedes ver la aplicaci\u00f3n utilizando el servidor web de Django. Como explica la documentaci\u00f3n, este servidor es solo para hacer pruebas durante el desarrollo de la aplicaci\u00f3n, no es apto para una puesta en producci\u00f3n. Los pasos para instalar y ejecutar esta aplicaci\u00f3n son los siguientes: Clonar el repositorio en un directorio de tu equipo git clone https://github.com/osso73/contabilidad.git Crear un entorno virtual, por ejemplo, utilizando el m\u00f3dulo venv de python. python -m venv .env .env\\Scripts\\activate.bat # para un entorno de windows source .env/bin/activate # para un entorno linux python -m pip install --upgrade pip Instalar los paquetes necesarios. Estos est\u00e1n detallados en el fichero requirements.txt . python -m pip install -r requirements.txt Actualizar la base de datos. El fichero de la base de datos no est\u00e1 en el repositorio, por lo que se tiene crear a partir de las migraciones: cd conta python manage.py migrate Lanzar la aplicaci\u00f3n con el servidor web de Django, utilizando el comando runserver . python manage.py runserver Ahora puedes acceder a la aplicaci\u00f3n en la direcci\u00f3n: http://127.0.0.1:8000.","title":"Empezando"},{"location":"empezando/#instalacion","text":"Esta es una aplicaci\u00f3n web, desarrollada utilizando el framewrok de Django . Por tanto, para ejecutarla necesitas ponerla en un servidor web. En la documentaci\u00f3n de Django, en el apartado de Deployment podr\u00e1s encontrar m\u00e1s detalles sobre c\u00f3mo hacerlo. En cualquier caso, puedes ver la aplicaci\u00f3n utilizando el servidor web de Django. Como explica la documentaci\u00f3n, este servidor es solo para hacer pruebas durante el desarrollo de la aplicaci\u00f3n, no es apto para una puesta en producci\u00f3n. Los pasos para instalar y ejecutar esta aplicaci\u00f3n son los siguientes: Clonar el repositorio en un directorio de tu equipo git clone https://github.com/osso73/contabilidad.git Crear un entorno virtual, por ejemplo, utilizando el m\u00f3dulo venv de python. python -m venv .env .env\\Scripts\\activate.bat # para un entorno de windows source .env/bin/activate # para un entorno linux python -m pip install --upgrade pip Instalar los paquetes necesarios. Estos est\u00e1n detallados en el fichero requirements.txt . python -m pip install -r requirements.txt Actualizar la base de datos. El fichero de la base de datos no est\u00e1 en el repositorio, por lo que se tiene crear a partir de las migraciones: cd conta python manage.py migrate Lanzar la aplicaci\u00f3n con el servidor web de Django, utilizando el comando runserver . python manage.py runserver Ahora puedes acceder a la aplicaci\u00f3n en la direcci\u00f3n: http://127.0.0.1:8000.","title":"Instalaci\u00f3n"},{"location":"manual_desarrollo/","text":"Estructura del repositorio Este repositorio tiene la siguiente estructura: git \u251c\u2500\u2500analysis \u251c\u2500\u2500conta \u2502 \u251c\u2500\u2500conta \u2502 \u2514\u2500\u2500main \u2514\u2500\u2500docs analysis : contiene algunos archivos utilizados para pruebas, o an\u00e1lisis de plantillas y formatos. Tambi\u00e9n un notebook de Jupyter donde pruebo algunas funciones antes de implementarlas en el programa. conta : es la carpeta con toda la estructura de django. Dentro de ella tenemos dos carpetas principales: conta : contiene la configuraci\u00f3n global del sitio web main : es una aplicaci\u00f3n dentro de django, que es la que contiene realmente toda la aplicaci\u00f3n. docs : toda la documentaci\u00f3n, estructurada en ficheros .md, para generar las p\u00e1ginas de ayuda mediante mkdocs . La estructura de directorios es la propia de un proyecto django. Ver la documentaci\u00f3n de django para m\u00e1s informaci\u00f3n. Adem\u00e1s de la estructura por defecto, he creado alg\u00fan fichero o carpeta nueva: tests : en esta carpeta est\u00e1n todos los ficheros de tests. Incluye tambi\u00e9n una subcarpeta con ficheros que se utilizan para hacer los tests, para subir plantillas y ficheros de cuentas (con o sin errores). functions.py : este fichero contiene funciones para el procesado de datos, adicionales a las funciones dentro del fichero de views.py . Tests Para hacer los tests del entorno, he seguido el paquete proporcionado por django, basado en Unittest. Adem\u00e1s utilizo la librer\u00eda WebTest para hacer tests que utilizan formularios, lo cual me permite validar las funciones post, y alguna funci\u00f3n m\u00e1s avanzada que las del entorno test de django. De momento tengo los tests organizados en dos ficheros: - test_models.py : contiene los tests para validar los modelos de datos creados - test_views.py : contiene los tests para validar las views. A trav\u00e9s de las views se testean todas las dem\u00e1s funciones de procesado de datos, tambi\u00e9n las incluidas en functions.py . Hay una clase para cada vista, y una clase para cada modelo. Dentro de la clase se hacen todos los tests relacionados con la vista o modelo. Tambi\u00e9n utlizo el programa Coverage , para identificar la cobertura de los tests. La configuraci\u00f3n de coverage est\u00e1 en el fichero .coverage.rc . Gracias a esta configuraci\u00f3n, se pueden ejecutar los tests simplemente con el comando: coverage run Esto permite luego obtener un informe de la cobertura, ejecutando los siguientes comandos: coverage report # para un informe en la consola coverage html # genera un informe detallado en html El segundo comando crea una carpeta htmlcov , con un fichero htmlcov/index.html que contiene informaci\u00f3n detallada de qu\u00e9 l\u00edneas de c\u00f3digo no han sido testeadas. De esta forma nos aseguramos de testear todos los casos, funciones, y ramas de nuestro programa.","title":"Manual de desarrollador"},{"location":"manual_desarrollo/#estructura-del-repositorio","text":"Este repositorio tiene la siguiente estructura: git \u251c\u2500\u2500analysis \u251c\u2500\u2500conta \u2502 \u251c\u2500\u2500conta \u2502 \u2514\u2500\u2500main \u2514\u2500\u2500docs analysis : contiene algunos archivos utilizados para pruebas, o an\u00e1lisis de plantillas y formatos. Tambi\u00e9n un notebook de Jupyter donde pruebo algunas funciones antes de implementarlas en el programa. conta : es la carpeta con toda la estructura de django. Dentro de ella tenemos dos carpetas principales: conta : contiene la configuraci\u00f3n global del sitio web main : es una aplicaci\u00f3n dentro de django, que es la que contiene realmente toda la aplicaci\u00f3n. docs : toda la documentaci\u00f3n, estructurada en ficheros .md, para generar las p\u00e1ginas de ayuda mediante mkdocs . La estructura de directorios es la propia de un proyecto django. Ver la documentaci\u00f3n de django para m\u00e1s informaci\u00f3n. Adem\u00e1s de la estructura por defecto, he creado alg\u00fan fichero o carpeta nueva: tests : en esta carpeta est\u00e1n todos los ficheros de tests. Incluye tambi\u00e9n una subcarpeta con ficheros que se utilizan para hacer los tests, para subir plantillas y ficheros de cuentas (con o sin errores). functions.py : este fichero contiene funciones para el procesado de datos, adicionales a las funciones dentro del fichero de views.py .","title":"Estructura del repositorio"},{"location":"manual_desarrollo/#tests","text":"Para hacer los tests del entorno, he seguido el paquete proporcionado por django, basado en Unittest. Adem\u00e1s utilizo la librer\u00eda WebTest para hacer tests que utilizan formularios, lo cual me permite validar las funciones post, y alguna funci\u00f3n m\u00e1s avanzada que las del entorno test de django. De momento tengo los tests organizados en dos ficheros: - test_models.py : contiene los tests para validar los modelos de datos creados - test_views.py : contiene los tests para validar las views. A trav\u00e9s de las views se testean todas las dem\u00e1s funciones de procesado de datos, tambi\u00e9n las incluidas en functions.py . Hay una clase para cada vista, y una clase para cada modelo. Dentro de la clase se hacen todos los tests relacionados con la vista o modelo. Tambi\u00e9n utlizo el programa Coverage , para identificar la cobertura de los tests. La configuraci\u00f3n de coverage est\u00e1 en el fichero .coverage.rc . Gracias a esta configuraci\u00f3n, se pueden ejecutar los tests simplemente con el comando: coverage run Esto permite luego obtener un informe de la cobertura, ejecutando los siguientes comandos: coverage report # para un informe en la consola coverage html # genera un informe detallado en html El segundo comando crea una carpeta htmlcov , con un fichero htmlcov/index.html que contiene informaci\u00f3n detallada de qu\u00e9 l\u00edneas de c\u00f3digo no han sido testeadas. De esta forma nos aseguramos de testear todos los casos, funciones, y ramas de nuestro programa.","title":"Tests"},{"location":"manual_usuario/","text":"contenido a desarrollar","title":"Manual de usuario"}]}