{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"contabilidad Esta es una sencilla aplicaci\u00f3n de contabilidad para llevar las cuentas personales, desarrollada en Django y Bulma. Basado en los principios b\u00e1sicos de contabilidad (e.g. utilizando asientos de 2 o m\u00e1s movimientos para entrar los movimientos de dinero de una cuenta a otra), esta peque\u00f1a aplicaci\u00f3n permite hacer un seguimiento de los gastos personales. Una vez entrados los gastos, se pueden sacar informes de movimientos por cuenta, o grupos de cuentas, en varios formatos.","title":"contabilidad"},{"location":"#contabilidad","text":"Esta es una sencilla aplicaci\u00f3n de contabilidad para llevar las cuentas personales, desarrollada en Django y Bulma. Basado en los principios b\u00e1sicos de contabilidad (e.g. utilizando asientos de 2 o m\u00e1s movimientos para entrar los movimientos de dinero de una cuenta a otra), esta peque\u00f1a aplicaci\u00f3n permite hacer un seguimiento de los gastos personales. Una vez entrados los gastos, se pueden sacar informes de movimientos por cuenta, o grupos de cuentas, en varios formatos.","title":"contabilidad"},{"location":"acerca_de/","text":"Licencia Este proyecto utiliza la licencia de MIT. Para su desarrollo he utilizado varias librer\u00edas o frameworks, que detallo a continuaci\u00f3n: Django : framework de desarrollo de sitios web basado en python. Facilita la creaci\u00f3n de un sitio web con una base de datos. Bulma : framework moderno de CSS. OpenPyXL : librer\u00eda para manipular ficheros excel, utilizados para cargar datos (cuentas y asientos). pandas : librer\u00eda m\u00e1s potente para la manipulaci\u00f3n y extracci\u00f3n de datos de un fichero excel. pytest : framework de test, sustituye al est\u00e1ndar de python Unittest, es m\u00e1s flexible y permite hacer tests m\u00e1s completos utilizando par\u00e1metros. WebTest : permite realizar tests m\u00e1s precisos de un entorno web, m\u00e1s all\u00e1 del est\u00e1ndar proporcionado por django. Coverage : paquete para analizar los tests realizados. Detecta qu\u00e9 partes del c\u00f3digo han sido testeadas, y qu\u00e9 partes no han sido. MkDocs : paquete para la generaci\u00f3n y mantenimiento de documentaci\u00f3n. Adem\u00e1s utilizo los siguientes recursos: - Imagen de fondo del t\u00edtulo: photo by Pawe\u0142 Czerwi\u0144ski on Unsplash .","title":"Acerca de"},{"location":"acerca_de/#licencia","text":"Este proyecto utiliza la licencia de MIT. Para su desarrollo he utilizado varias librer\u00edas o frameworks, que detallo a continuaci\u00f3n: Django : framework de desarrollo de sitios web basado en python. Facilita la creaci\u00f3n de un sitio web con una base de datos. Bulma : framework moderno de CSS. OpenPyXL : librer\u00eda para manipular ficheros excel, utilizados para cargar datos (cuentas y asientos). pandas : librer\u00eda m\u00e1s potente para la manipulaci\u00f3n y extracci\u00f3n de datos de un fichero excel. pytest : framework de test, sustituye al est\u00e1ndar de python Unittest, es m\u00e1s flexible y permite hacer tests m\u00e1s completos utilizando par\u00e1metros. WebTest : permite realizar tests m\u00e1s precisos de un entorno web, m\u00e1s all\u00e1 del est\u00e1ndar proporcionado por django. Coverage : paquete para analizar los tests realizados. Detecta qu\u00e9 partes del c\u00f3digo han sido testeadas, y qu\u00e9 partes no han sido. MkDocs : paquete para la generaci\u00f3n y mantenimiento de documentaci\u00f3n. Adem\u00e1s utilizo los siguientes recursos: - Imagen de fondo del t\u00edtulo: photo by Pawe\u0142 Czerwi\u0144ski on Unsplash .","title":"Licencia"},{"location":"inicio/","text":"Inicio r\u00e1pido Instalaci\u00f3n Esta es una aplicaci\u00f3n web, desarrollada utilizando el framewrok de Django . Por tanto, para ejecutarla necesitas ponerla en un servidor web. En la documentaci\u00f3n de Django, en el apartado de Deployment podr\u00e1s encontrar m\u00e1s detalles sobre c\u00f3mo hacerlo. En cualquier caso, puedes ver la aplicaci\u00f3n utilizando el servidor web de Django. Como explica la documentaci\u00f3n, este servidor es solo para hacer pruebas durante el desarrollo de la aplicaci\u00f3n, no es apto para una puesta en producci\u00f3n. Los pasos para instalar y ejecutar esta aplicaci\u00f3n son los siguientes: Clonar el repositorio en un directorio de tu equipo git clone https://github.com/osso73/contabilidad.git Crear un entorno virtual, por ejemplo, utilizando el m\u00f3dulo venv de python. python -m venv .env .env\\Scripts\\activate.bat # para un entorno de windows source .env/bin/activate # para un entorno linux python -m pip install --upgrade pip Instalar los paquetes necesarios. Estos est\u00e1n detallados en el fichero requirements.txt . python -m pip install -r requirements.txt Actualizar la base de datos. El fichero de la base de datos no est\u00e1 en el repositorio, por lo que se tiene crear a partir de las migraciones: cd conta python manage.py migrate Lanzar la aplicaci\u00f3n con el servidor web de Django, utilizando el comando runserver . python manage.py runserver Ahora puedes acceder a la aplicaci\u00f3n en la direcci\u00f3n: http://127.0.0.1:8000. Primeros pasos Creaci\u00f3n usuario Para empezar a acceder hay que crear un usuario. La aplicaci\u00f3n s\u00f3lo funciona con un usuario autentificado, como se explica en la documentaci\u00f3n . Siguiendo la documentaci\u00f3nd de Django, para crear el primer usuario, que ser\u00e1 el administrador, hay que hacer: python manage.py createsuperuser Para la gesti\u00f3n de usuarios (crear adicionales, borrar, etc.) hay que acceder a la consola admin proporcionada por Django en la direcci\u00f3n: http://127.0.0.1:8000/admin/. Una vez creado, podemos ir a nuestra aplicaci\u00f3n, y hacer login con este usuario. Creaci\u00f3n cuentas Lo primero que hay que hacer es crear cuentas, para despu\u00e9s poder entrar algunos movimientos. Vamos al men\u00fa de cuentas, y desde all\u00ed vamos a crear primero algunas etiquetas. En el submen\u00fa de etiquetas entra las siguientes etiquetas, pulsando el icono verde para crear cada una: Etiqueta Texto etiqueta gastos Cuentas de gastos ingresos Cuentas de ingresos balance Cuentas de balance Ahora podemos crear algunas cuentas. En el panel amarillo de arriba, entrar algunas cuentas con los siguientes datos: N\u00famero Nombre Etiqueta 100 Caja balance 110 Tarjeta visa balance 111 Cuenta N\u00f3mina balance 300 Comida gastos 310 Ropa gastos 400 N\u00f3mina trabajo ingresos Ya tenemos las cuentas creadas. Puedes encontrar m\u00e1s detalle sobre c\u00f3mo utilizar esta pantalla en la documentaci\u00f3n . Creaci\u00f3n asientos Ahora podemos crear algunos asientos. Vamos al men\u00fa asientos, y utilizando el formulario amarillo de la parte superior entramos los siguientes asientos: Fecha Descripci\u00f3n Valor Cuenta debe Cuenta haber 05/03/2022 Compra pan 2.54 100 300 07/03/2022 Carne 35.00 110 300 10/03/2022 Abrigo invierno 62.90 110 310 12/03/2022 Zapatos 48.00 110 310 28/03/2022 Ingreso N\u00f3mina 1500.00 400 111 31/03/2022 Cargo Tarjeta 145.90 111 110 La cuenta se puede escoger del men\u00fa dropdown , o bien teclear el n\u00famero. Cada vez que pulsamos a\u00f1adir vemos que se crean dos movimientos, asociados al mismo asiento. Para m\u00e1s informaci\u00f3n sobre c\u00f3mo funciona el mecanismo, ver la documentaci\u00f3n . Ya tenemos los movimientos. Ahora podr\u00edamos filtrar, para ver qu\u00e9 movimientos tenemos en la tarjeta. En el submen\u00fa Filtro , entrar la cuenta 110 y pulsar el bot\u00f3n verde. Podemos ver los movimientos, y abajo del todo vemos el balance de los movimientos mostrados. En este caso, la tarjeta est\u00e1 a 0, ya que nos han pasado el cargo a final de mes. Informes En el men\u00fa de informes podemos generar algunas vistas para ver en qu\u00e9 nos hemos gastado el dinero. Por ejemplo vamos a hacer un informe de gastos, a ver c\u00f3mo vamos. Entramos en el men\u00fa de par\u00e1metros la etiqueta \"gastos\", y damos al bot\u00f3n verde. Al no poner rango de fechas va a tomar todos los movimientos, y la agregaci\u00f3n por defecto es diaria. De esta forma vemos qu\u00e9 gastos diarios hemos tenido. En la documentaci\u00f3n podr\u00e1s encontrar m\u00e1s detalle sobre los par\u00e1metros de los informes.","title":"Inicio r\u00e1pido"},{"location":"inicio/#inicio-rapido","text":"","title":"Inicio r\u00e1pido"},{"location":"inicio/#instalacion","text":"Esta es una aplicaci\u00f3n web, desarrollada utilizando el framewrok de Django . Por tanto, para ejecutarla necesitas ponerla en un servidor web. En la documentaci\u00f3n de Django, en el apartado de Deployment podr\u00e1s encontrar m\u00e1s detalles sobre c\u00f3mo hacerlo. En cualquier caso, puedes ver la aplicaci\u00f3n utilizando el servidor web de Django. Como explica la documentaci\u00f3n, este servidor es solo para hacer pruebas durante el desarrollo de la aplicaci\u00f3n, no es apto para una puesta en producci\u00f3n. Los pasos para instalar y ejecutar esta aplicaci\u00f3n son los siguientes: Clonar el repositorio en un directorio de tu equipo git clone https://github.com/osso73/contabilidad.git Crear un entorno virtual, por ejemplo, utilizando el m\u00f3dulo venv de python. python -m venv .env .env\\Scripts\\activate.bat # para un entorno de windows source .env/bin/activate # para un entorno linux python -m pip install --upgrade pip Instalar los paquetes necesarios. Estos est\u00e1n detallados en el fichero requirements.txt . python -m pip install -r requirements.txt Actualizar la base de datos. El fichero de la base de datos no est\u00e1 en el repositorio, por lo que se tiene crear a partir de las migraciones: cd conta python manage.py migrate Lanzar la aplicaci\u00f3n con el servidor web de Django, utilizando el comando runserver . python manage.py runserver Ahora puedes acceder a la aplicaci\u00f3n en la direcci\u00f3n: http://127.0.0.1:8000.","title":"Instalaci\u00f3n"},{"location":"inicio/#primeros-pasos","text":"","title":"Primeros pasos"},{"location":"inicio/#creacion-usuario","text":"Para empezar a acceder hay que crear un usuario. La aplicaci\u00f3n s\u00f3lo funciona con un usuario autentificado, como se explica en la documentaci\u00f3n . Siguiendo la documentaci\u00f3nd de Django, para crear el primer usuario, que ser\u00e1 el administrador, hay que hacer: python manage.py createsuperuser Para la gesti\u00f3n de usuarios (crear adicionales, borrar, etc.) hay que acceder a la consola admin proporcionada por Django en la direcci\u00f3n: http://127.0.0.1:8000/admin/. Una vez creado, podemos ir a nuestra aplicaci\u00f3n, y hacer login con este usuario.","title":"Creaci\u00f3n usuario"},{"location":"inicio/#creacion-cuentas","text":"Lo primero que hay que hacer es crear cuentas, para despu\u00e9s poder entrar algunos movimientos. Vamos al men\u00fa de cuentas, y desde all\u00ed vamos a crear primero algunas etiquetas. En el submen\u00fa de etiquetas entra las siguientes etiquetas, pulsando el icono verde para crear cada una: Etiqueta Texto etiqueta gastos Cuentas de gastos ingresos Cuentas de ingresos balance Cuentas de balance Ahora podemos crear algunas cuentas. En el panel amarillo de arriba, entrar algunas cuentas con los siguientes datos: N\u00famero Nombre Etiqueta 100 Caja balance 110 Tarjeta visa balance 111 Cuenta N\u00f3mina balance 300 Comida gastos 310 Ropa gastos 400 N\u00f3mina trabajo ingresos Ya tenemos las cuentas creadas. Puedes encontrar m\u00e1s detalle sobre c\u00f3mo utilizar esta pantalla en la documentaci\u00f3n .","title":"Creaci\u00f3n cuentas"},{"location":"inicio/#creacion-asientos","text":"Ahora podemos crear algunos asientos. Vamos al men\u00fa asientos, y utilizando el formulario amarillo de la parte superior entramos los siguientes asientos: Fecha Descripci\u00f3n Valor Cuenta debe Cuenta haber 05/03/2022 Compra pan 2.54 100 300 07/03/2022 Carne 35.00 110 300 10/03/2022 Abrigo invierno 62.90 110 310 12/03/2022 Zapatos 48.00 110 310 28/03/2022 Ingreso N\u00f3mina 1500.00 400 111 31/03/2022 Cargo Tarjeta 145.90 111 110 La cuenta se puede escoger del men\u00fa dropdown , o bien teclear el n\u00famero. Cada vez que pulsamos a\u00f1adir vemos que se crean dos movimientos, asociados al mismo asiento. Para m\u00e1s informaci\u00f3n sobre c\u00f3mo funciona el mecanismo, ver la documentaci\u00f3n . Ya tenemos los movimientos. Ahora podr\u00edamos filtrar, para ver qu\u00e9 movimientos tenemos en la tarjeta. En el submen\u00fa Filtro , entrar la cuenta 110 y pulsar el bot\u00f3n verde. Podemos ver los movimientos, y abajo del todo vemos el balance de los movimientos mostrados. En este caso, la tarjeta est\u00e1 a 0, ya que nos han pasado el cargo a final de mes.","title":"Creaci\u00f3n asientos"},{"location":"inicio/#informes","text":"En el men\u00fa de informes podemos generar algunas vistas para ver en qu\u00e9 nos hemos gastado el dinero. Por ejemplo vamos a hacer un informe de gastos, a ver c\u00f3mo vamos. Entramos en el men\u00fa de par\u00e1metros la etiqueta \"gastos\", y damos al bot\u00f3n verde. Al no poner rango de fechas va a tomar todos los movimientos, y la agregaci\u00f3n por defecto es diaria. De esta forma vemos qu\u00e9 gastos diarios hemos tenido. En la documentaci\u00f3n podr\u00e1s encontrar m\u00e1s detalle sobre los par\u00e1metros de los informes.","title":"Informes"},{"location":"manual_desarrollador/despliegue/","text":"Despliegue en producci\u00f3n Tal como dice la documentacion de Dango, el servidor incluido como parte de Django nos sirve para ir haciendo las pruebas y ver c\u00f3mo queda la aplicaci\u00f3n seg\u00fan la vamos desarrollando, pero para utilizarlo en un entorno de producci\u00f3n, es decir para su uso habitual, es recomendable utilizar un servidor web como apache o nginx, que son mucho m\u00e1s robustos y seguros. Como explican en Django, existen varias opciones para hacer el despliegue. Aqu\u00ed voy a explicar c\u00f3mo lo he hecho, utilizando un servidor nginx como servidor web, y Gunicorn como servidor WSGI, instalado sobre un jail en FreeBSD. Para este proyecto utilizo la base de datos por defecto sqlite, pero tambi\u00e9n se puede utilizar una base de datos m\u00e1s robusta, mariadb por ejemplo. Voy a incluir un cap\u00edtulo al final explicando c\u00f3mo hacer el despliegue utilizando una base de datos mariadb. Veremos no s\u00f3lo los paquetes de software que hay que desplegar y configurar en el servidor (en el jail), sino tambi\u00e9n las adaptaciones que tenemos que hacer en nuestra configuraci\u00f3n. Estas modificaciones ya est\u00e1n hechas en la versi\u00f3n que hay en github, pero tendr\u00e1s que adaptarlos en funci\u00f3n del despliegue que vayas a hacer. Configuraci\u00f3n inicial de paquetes Una vez creado el jail, actualizamos la configuraci\u00f3n, y creamos un directorio donde vamos a desplegar nuestros(s) proyecto(s) de django: pkg update mkdir -p /home/django/projects Esta carpeta ser\u00e1 donde copiaremos nuestro proyecto. Yo utilizo el mismo servidor para desplegar varias aplicaciones django, por eso tengo la carpeta \"projects\", dentro de la cual crear\u00e9 mi carpeta de \"contabilidad\". Si solo lo utilizas para este proyecto, puedes poner la \"contabilidad\" directamente en la carpeta de django. Para copiar los ficheros a esta carpeta utiliza el m\u00e9todo que consideres m\u00e1s adecuado. En mi caso, monto un sistema de ficheros en la carpeta \"projects\", y ese sistema lo puedo acceder desde mis m\u00e1quinas linux o windows para copiar ficheros en \u00e9l. Ahora instalamos los paquetes que necesitamos. Estos son python, junto con pip, nginx y sqlite para la base de datos. Django y Gunicorn son paquetes de python que instalaremos dentro del servidor virtual que crearemos para nuestro proyecto. De esta forma podemos tener varios proyectos django en el mismo servidor. pkg install -y python nginx python -m ensurepip pip3 install --upgrade pip pkg install -y sqlite3 py38-sqlite3 Atenci\u00f3n a que el paquete de sqlite corresponda a la versi\u00f3n de python instalada en el sistema; en nuestro caso, la 3.8. Creaci\u00f3n y configuraci\u00f3n de usuario Vamos a crear un usuario django que ser\u00e1 el que ejecute el servidor. De esta forma no tenemos que utilizar el usuario root, y es m\u00e1s seguro. Creamos el grupo y el usuario, y le asignamos la carpeta que hemos creado antes: pw groupadd django -g 1000 pw useradd django -u 1000 -g django -s /bin/sh -c \"django project\" -d /home/django chown -R django:django /home/django Ficheros django y configuraci\u00f3n Ahora copiamos los ficheros de nuestro proyecto a la carpeta que hemos creado antes, con el m\u00e9todo que decidas. Solo hay que copiar la carpeta conta dentro de nuestro proyecto, que es la que contiene el proyecto django. Adem\u00e1s el fichero requirements.txtx para poder crear el entorno virtual. Puedes copiarlo en la carpeta de conta . A continuaci\u00f3n hay que hacer algunos ajustes. Creaci\u00f3n del entorno virtual Primero creamos el entorno virtual: cd /home/django/projects/conta python -m venv .venv Ahora activamos en entorno, e instalamos los paquetes, tanto los necesarios para el proyecto, como el gunicorn: source .venv/bin/activate.csh pip install -r requirements.txt pip install gunicorn Ficheros est\u00e1ticos Los ficheros est\u00e1ticos ser\u00e1n servidos directamente por nuestro servidor nginx, ya que gunicorn solo va a servir las p\u00e1ginas din\u00e1micas. Por esta raz\u00f3n tenemos que hacer ajustar la configuraci\u00f3n de django, a\u00f1adiendo esta l\u00ednea: STATIC_ROOT = BASE_DIR / 'static' STATIC_URL = '/static/' Esta configuraci\u00f3n ya est\u00e1 en el repositorio de django, por lo que no hace falta a\u00f1adirlo. Despu\u00e9s hay ejecutar este comando desde la carpeta de nuestro proyecto: python manage.py collectstatic Este comando recoge todos los ficheros est\u00e1ticos de nuestro proyecto, y los agrupa en una carpeta static dentro de nuestro proyecto. De esta forma podremos configurar nginx para servir estos ficheros. Atenci\u00f3n: si m\u00e1s adelante haces cambios en tu proyecto tendr\u00e1s que correr este comando otra vez, para actualizar los ficheros est\u00e1ticos. Settings de producci\u00f3n En un entorno de producci\u00f3n hay que cambiar alguna configuraci\u00f3n para que el entorno sea m\u00e1s seguro, seg\u00fan las recomendaciones de django. Para no tener que estar cambiando estas configuraciones cada vez que copio los ficheros al entorno productivo, lo que hago es crear un fichero de settings de producci\u00f3n, que llamo settings_production.py , y cambio la configuraci\u00f3n de wsgi.py para apuntar a este fichero en lugar de apuntar al est\u00e1ndar settings.py . Este nuevo fichero importar\u00e1 todos los settings que tenemos en settings.py , y luego cambiar\u00e1 los que necesitamos cambiar. De esta forma, cuando estoy desarrollando seguir\u00e9 utilizando el fichero est\u00e1ndar, y en producci\u00f3n tendr\u00e9 la configuraci\u00f3n m\u00e1s segura. Este fichero ya est\u00e1 creado en el repositorio de github, pero hay que configurarlo con los valores adecuados. Est\u00e1 en el mismo directorio que settings.py , y tiene este contenido: from .settings import * DEBUG = False ALLOWED_HOSTS = ['IP DEL SERVIDOR', 'DOMINIO'] CSRF_TRUSTED_ORIGINS = ['https://DOMINIO'] with open('/usr/local/etc/conta/secret_key') as f: SECRET_KEY = f.read().strip() Debes utilizar la IP de tu servidor, y el DOMINIO donde estar\u00e1 corriendo el servidor. Adem\u00e1s la clave secreta es conveniente tenerla en otra carpeta que no est\u00e9 dentro del proyecto, para evitar que se pueda acceder desde la web. Por esta raz\u00f3n la guardamos en un fichero que leemos desde django. Ahora tenemos que crear este fichero. Vamos a crear primero la carpeta donde guardamos varias configuraciones para nuestro proyecto: mkdir -p /usr/local/etc/conta vi /usr/local/etc/conta/secret_key La clave secreta ( SECRET_KEY ) es una secuencia \u00fanica de car\u00e1cteres, y suficientemente larga. Una clave \u00fanica se puede obtener por ejemplo de: http://uuid.online (o por cualquier otro m\u00e9todo). Guarda la clave en ese fichero, para ser le\u00edda por django. Configuraci\u00f3n de gunicorn Comprobar primero que gunicorn funciona. Ejecutar el comando: gunicorn conta.wsgi -b IP:8000 Utilizando la IP del servidor. Comprobar que el servidor en: http://IP:8000 funciona correctamente (atenci\u00f3n, las im\u00e1genes no se ver\u00e1n, ni los archivos CSS, por ser archivos est\u00e1ticos: el servidor gunicorn no sirve archivos est\u00e1ticos). Una vez comprobado que funciona, vamos a crear la configuraci\u00f3n para lanzar gunicorn como demonio al arrancar la m\u00e1quina. Primero tenemos que crear el fichero de configuraci\u00f3n de gunicorn. Utilizaremos la carpeta que ya hemos creado, vamos a llamar ese fichero /usr/local/etc/locallibrary/gunicorn_conf.py . El contenido de este fichero debe ser el siguiente: command = '/home/django/projects/conta/.venv/bin/gunicorn' pythonpath = '/home/django/projects/conta' bind = 'IP:8000' workers = 3 user = 'django' group = 'django' daemon = True wsgi_app = 'conta.wsgi' pidfile = '/var/run/gunicorn.conta.pid' Sustituye la IP por la ip del servidor. Aqu\u00ed estamos indicando los par\u00e1metros para la ejecuci\u00f3n de gunicorn. Ahora tenemos que crear un servicio de arranque, y lo haremos en la carpeta /usr/local/etc/rc.d . Esta carpeta ya ha sido creada al instalar nginx, ya que contiene el fichero de arranque de nginx. Vamos a crear el fichero /usr/local/etc/rc.d/conta , con el siguiente contenido: #!/bin/sh # PROVIDE: locallibrary # REQUIRE: netif . /etc/rc.subr name=\"conta\" rcvar=\"${name}_enable\" pidfile=\"/var/run/gunicorn.conta.pid\" extra_commands=\"status\" start_cmd=\"/home/django/projects/conta/.venv/bin/gunicorn -c /usr/local/etc/conta/gunicorn_conf.py ; echo $name is now running on PID $(cat $pidfile)\" stop_cmd=\"kill $(cat $pidfile) ; echo $name is not running. ; rm $pidfile\" status_cmd=\"if [ -e $pidfile ]; then echo $name is running on PID $(cat $pidfile). ; return 1; fi; echo $name is not running. ; return 0\" load_rc_config $name run_rc_command \"$1\" Para m\u00e1s informaci\u00f3n sobre estos comandos, consultar la documentaci\u00f3n Practical rc.d scripting in BSD . Ahora tenemos que hacer este fichero ejecutable, y configurar el servicio para que arranque autom\u00e1ticamente: chmod +x /usr/local/etc/rc.d/conta sysrc conta=YES Ahora podemos arrancar el servicio con el comando: service conta start Otros comandos disponibles son: service conta stop # para el servicio service conta status # para saber el estado, si est\u00e1 arrancado o no Configuraci\u00f3n nginx Ahora tenemos que configurar nginx para servir las p\u00e1ginas. Aqu\u00ed describo una configuraci\u00f3n sin certificados, ya que en mi caso utilizo un reverse proxy que es donde tengo configurado el certificado y protocolo https. Si no utilizas un reverse proxy , es conveniente que incluyas la configuraci\u00f3n con certificados en este servidor. En primer lugar, edita el fichero /usr/local/etc/nginx/nginx.con , reemplaza su contenido por el siguiente: worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; # Import server blocks for all subdomains include \"vdomains/*.conf\"; } Ahora hay que crear una carpeta /usr/local/etc/nginx/vdomains , que contendr\u00e1 los servidores para cada uno de los proyectos que tengamos. El primero que crearemos ser\u00e1 el servidor por defecto. Crea el fichero /usr/local/etc/nginx/vdomains/default.conf , con la siguiente configuraci\u00f3n: server { # if no Host match, close the connection to prevent host spoofing listen 80 default_server; return 444; } Esta configuraci\u00f3n hace que si llega una petici\u00f3n que no encaja con ninguno de los servidores configurados, cierra la conexi\u00f3n. Y ahora creamos el servidor para nuestro proyecto. Crea el fichero /usr/local/etc/nginx/vdomains/conta.conf , con la siguiente configuraci\u00f3n: server { listen 80; server_name DOMAIN; access_log /var/log/nginx/conta.access.log; error_log /var/log/nginx/conta.error.log; location / { proxy_pass http://IP:8000; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /static/ { alias /home/django/projects/conta/static/; } } Reemplaza IP por la ip de tu servidor, y DOMAIN por el dominio que utilices para alojar el servidor. F\u00edjate en la configuraci\u00f3n para los ficheros est\u00e1ticos: las peticiones que empiezan con el path /static/ son servidas directamente por nginx, utilizando como directorio ra\u00edz el directorio donde hemos puesto los ficheros est\u00e1ticos antes. Las dem\u00e1s peticiones son redirigidas a nuestro servidor gunicorn. Ahora configuramos el servicio nginx para arrancar autom\u00e1ticamente, y lo arrancamos: sysrc nginx_enable=yes service nginx start Si m\u00e1s adelante haces cambios en la configuraci\u00f3n de nginx, puedes forzar la relectura de la configuraci\u00f3n con el siguiente comando: service nginx reload Con esto estar\u00eda todo configurado para su correcto funcionamiento. No olvides utilizar un reverse proxy para asegurar una conexi\u00f3n segura https, o bien cambiar la configuraci\u00f3n de nginx para utilizar certificados y forzar el acceso a trav\u00e9s de https. Uso de mariadb Para una aplicaci\u00f3n con pocos accesos, la base de datos sqlite es m\u00e1s que suficiente. Pero si esperas tener muchos accesos, o simplemente quieres hacerla m\u00e1s robusta, puedes utilizar mariadb como base de datos. Aqu\u00ed explico los cambios necesarios para realizarlo. Instalaci\u00f3n de mariadb Primero hay que instalar mariadb: pkg install -y mariadb105-server # utiliza la \u00faltima versi\u00f3n disponible pip install mysqlclient Editar el fichero /usr/local/etc/mysql/my.cnf , y sustituir la siguiente l\u00ednea: # l\u00ednea a reemplazar: socket = /var/run/mysql/mysql.sock # nueva l\u00ednea: socket = /tmp/mysql.sock Ahora configuramos el servicio para empezar autom\u00e1ticamente, y lo arrancamos: sysrc mysql_enable=yes service mysql-server start Securizaci\u00f3n de mariadb, y creaci\u00f3n de la base de datos Lanzamos el siguiente script para securizar la configuraci\u00f3n de mariadb, seg\u00fan recomendaci\u00f3n del fabricante: mysql_secure_installation --socket=/tmp/mysql.sock Acepta todos los valores por defecto, y crea un password de root para acceder a mariadb. Este password tendr\u00e1s que utilizarlo en el siguiente paso. Este escript implementa las mejores pr\u00e1cticas para securizar la base de datos. Ahora vamos a deshabilitar tambi\u00e9n el acceso remoto a la base de datos: sysrc mysql_args=\"--bind-address=127.0.0.1\" service mysql-server restart A continuaci\u00f3n creamos la base de datos: mysql -u root -p Entra el password de root que acabas de crear, y ahora entra los siguientes comandos para crear la base de datos: CREATE DATABASE conta CHARACTER SET UTF8; CREATE USER 'accountant'@'localhost' IDENTIFIED BY 'accountant-password'; GRANT ALL ON conta.* TO 'accountant'@'localhost'; FLUSH PRIVILEGES; exit Utiliza el nombre de base de datos, usuario y password de tu gusto. Estos los necesitaremos luego para la configuraci\u00f3n de django. Configuraci\u00f3n de Django - base de datos Ahora tenemos que actualizar los ajustes de nuestro proyecto. Abre el fichero settings.py de nuestro proyecto, y reemplaza la antigua configuraci\u00f3n por la nueva: #### antigua configuraci\u00f3n (la que viene por defecto) ##### DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } ##### nueva configuraci\u00f3n ##### DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'conta', 'USER': 'accountant', 'PASSWORD': 'accountant-password', 'HOST': 'localhost', 'PORT': '', } } Aqu\u00ed es donde ponemos los valores que hemos utilizado antes. Para mayor seguridad, podemos poner el usuario y password de la base de datos en otro directorio, igual que hemos hecho con la clave secreta. En ese caso cambiamos la configuraci\u00f3n de la siguiente forma, crando tambi\u00e9n un fichero nuevo: # settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'OPTIONS': { 'read_default_file': '/usr/local/etc/conta/mariadb.cnf', }, } } # /usr/local/etc/conta/mariadb.cnf [client] database = conta user = accountant password = accountant-password default-character-set = utf8 Una vez realizados estos cambios en la configuraci\u00f3n, hay que correr las migraciones: python manage.py makemigrations python manage.py migrate Y finalmente volver a crear un superusuario: python manage.py createsuperuser Referencias Para crear esta gu\u00eda, he consultado los siguientes art\u00edculos y documentaci\u00f3n: Django project documentation Django deployment checklist Gunicorn configuration Practical rc.d scripting in BSD How To Use MySQL or MariaDB with your Django Application on Ubuntu 14.04","title":"Despliegue"},{"location":"manual_desarrollador/despliegue/#despliegue-en-produccion","text":"Tal como dice la documentacion de Dango, el servidor incluido como parte de Django nos sirve para ir haciendo las pruebas y ver c\u00f3mo queda la aplicaci\u00f3n seg\u00fan la vamos desarrollando, pero para utilizarlo en un entorno de producci\u00f3n, es decir para su uso habitual, es recomendable utilizar un servidor web como apache o nginx, que son mucho m\u00e1s robustos y seguros. Como explican en Django, existen varias opciones para hacer el despliegue. Aqu\u00ed voy a explicar c\u00f3mo lo he hecho, utilizando un servidor nginx como servidor web, y Gunicorn como servidor WSGI, instalado sobre un jail en FreeBSD. Para este proyecto utilizo la base de datos por defecto sqlite, pero tambi\u00e9n se puede utilizar una base de datos m\u00e1s robusta, mariadb por ejemplo. Voy a incluir un cap\u00edtulo al final explicando c\u00f3mo hacer el despliegue utilizando una base de datos mariadb. Veremos no s\u00f3lo los paquetes de software que hay que desplegar y configurar en el servidor (en el jail), sino tambi\u00e9n las adaptaciones que tenemos que hacer en nuestra configuraci\u00f3n. Estas modificaciones ya est\u00e1n hechas en la versi\u00f3n que hay en github, pero tendr\u00e1s que adaptarlos en funci\u00f3n del despliegue que vayas a hacer.","title":"Despliegue en producci\u00f3n"},{"location":"manual_desarrollador/despliegue/#configuracion-inicial-de-paquetes","text":"Una vez creado el jail, actualizamos la configuraci\u00f3n, y creamos un directorio donde vamos a desplegar nuestros(s) proyecto(s) de django: pkg update mkdir -p /home/django/projects Esta carpeta ser\u00e1 donde copiaremos nuestro proyecto. Yo utilizo el mismo servidor para desplegar varias aplicaciones django, por eso tengo la carpeta \"projects\", dentro de la cual crear\u00e9 mi carpeta de \"contabilidad\". Si solo lo utilizas para este proyecto, puedes poner la \"contabilidad\" directamente en la carpeta de django. Para copiar los ficheros a esta carpeta utiliza el m\u00e9todo que consideres m\u00e1s adecuado. En mi caso, monto un sistema de ficheros en la carpeta \"projects\", y ese sistema lo puedo acceder desde mis m\u00e1quinas linux o windows para copiar ficheros en \u00e9l. Ahora instalamos los paquetes que necesitamos. Estos son python, junto con pip, nginx y sqlite para la base de datos. Django y Gunicorn son paquetes de python que instalaremos dentro del servidor virtual que crearemos para nuestro proyecto. De esta forma podemos tener varios proyectos django en el mismo servidor. pkg install -y python nginx python -m ensurepip pip3 install --upgrade pip pkg install -y sqlite3 py38-sqlite3 Atenci\u00f3n a que el paquete de sqlite corresponda a la versi\u00f3n de python instalada en el sistema; en nuestro caso, la 3.8.","title":"Configuraci\u00f3n inicial de paquetes"},{"location":"manual_desarrollador/despliegue/#creacion-y-configuracion-de-usuario","text":"Vamos a crear un usuario django que ser\u00e1 el que ejecute el servidor. De esta forma no tenemos que utilizar el usuario root, y es m\u00e1s seguro. Creamos el grupo y el usuario, y le asignamos la carpeta que hemos creado antes: pw groupadd django -g 1000 pw useradd django -u 1000 -g django -s /bin/sh -c \"django project\" -d /home/django chown -R django:django /home/django","title":"Creaci\u00f3n y configuraci\u00f3n de usuario"},{"location":"manual_desarrollador/despliegue/#ficheros-django-y-configuracion","text":"Ahora copiamos los ficheros de nuestro proyecto a la carpeta que hemos creado antes, con el m\u00e9todo que decidas. Solo hay que copiar la carpeta conta dentro de nuestro proyecto, que es la que contiene el proyecto django. Adem\u00e1s el fichero requirements.txtx para poder crear el entorno virtual. Puedes copiarlo en la carpeta de conta . A continuaci\u00f3n hay que hacer algunos ajustes.","title":"Ficheros django y configuraci\u00f3n"},{"location":"manual_desarrollador/despliegue/#creacion-del-entorno-virtual","text":"Primero creamos el entorno virtual: cd /home/django/projects/conta python -m venv .venv Ahora activamos en entorno, e instalamos los paquetes, tanto los necesarios para el proyecto, como el gunicorn: source .venv/bin/activate.csh pip install -r requirements.txt pip install gunicorn","title":"Creaci\u00f3n del entorno virtual"},{"location":"manual_desarrollador/despliegue/#ficheros-estaticos","text":"Los ficheros est\u00e1ticos ser\u00e1n servidos directamente por nuestro servidor nginx, ya que gunicorn solo va a servir las p\u00e1ginas din\u00e1micas. Por esta raz\u00f3n tenemos que hacer ajustar la configuraci\u00f3n de django, a\u00f1adiendo esta l\u00ednea: STATIC_ROOT = BASE_DIR / 'static' STATIC_URL = '/static/' Esta configuraci\u00f3n ya est\u00e1 en el repositorio de django, por lo que no hace falta a\u00f1adirlo. Despu\u00e9s hay ejecutar este comando desde la carpeta de nuestro proyecto: python manage.py collectstatic Este comando recoge todos los ficheros est\u00e1ticos de nuestro proyecto, y los agrupa en una carpeta static dentro de nuestro proyecto. De esta forma podremos configurar nginx para servir estos ficheros. Atenci\u00f3n: si m\u00e1s adelante haces cambios en tu proyecto tendr\u00e1s que correr este comando otra vez, para actualizar los ficheros est\u00e1ticos.","title":"Ficheros est\u00e1ticos"},{"location":"manual_desarrollador/despliegue/#settings-de-produccion","text":"En un entorno de producci\u00f3n hay que cambiar alguna configuraci\u00f3n para que el entorno sea m\u00e1s seguro, seg\u00fan las recomendaciones de django. Para no tener que estar cambiando estas configuraciones cada vez que copio los ficheros al entorno productivo, lo que hago es crear un fichero de settings de producci\u00f3n, que llamo settings_production.py , y cambio la configuraci\u00f3n de wsgi.py para apuntar a este fichero en lugar de apuntar al est\u00e1ndar settings.py . Este nuevo fichero importar\u00e1 todos los settings que tenemos en settings.py , y luego cambiar\u00e1 los que necesitamos cambiar. De esta forma, cuando estoy desarrollando seguir\u00e9 utilizando el fichero est\u00e1ndar, y en producci\u00f3n tendr\u00e9 la configuraci\u00f3n m\u00e1s segura. Este fichero ya est\u00e1 creado en el repositorio de github, pero hay que configurarlo con los valores adecuados. Est\u00e1 en el mismo directorio que settings.py , y tiene este contenido: from .settings import * DEBUG = False ALLOWED_HOSTS = ['IP DEL SERVIDOR', 'DOMINIO'] CSRF_TRUSTED_ORIGINS = ['https://DOMINIO'] with open('/usr/local/etc/conta/secret_key') as f: SECRET_KEY = f.read().strip() Debes utilizar la IP de tu servidor, y el DOMINIO donde estar\u00e1 corriendo el servidor. Adem\u00e1s la clave secreta es conveniente tenerla en otra carpeta que no est\u00e9 dentro del proyecto, para evitar que se pueda acceder desde la web. Por esta raz\u00f3n la guardamos en un fichero que leemos desde django. Ahora tenemos que crear este fichero. Vamos a crear primero la carpeta donde guardamos varias configuraciones para nuestro proyecto: mkdir -p /usr/local/etc/conta vi /usr/local/etc/conta/secret_key La clave secreta ( SECRET_KEY ) es una secuencia \u00fanica de car\u00e1cteres, y suficientemente larga. Una clave \u00fanica se puede obtener por ejemplo de: http://uuid.online (o por cualquier otro m\u00e9todo). Guarda la clave en ese fichero, para ser le\u00edda por django.","title":"Settings de producci\u00f3n"},{"location":"manual_desarrollador/despliegue/#configuracion-de-gunicorn","text":"Comprobar primero que gunicorn funciona. Ejecutar el comando: gunicorn conta.wsgi -b IP:8000 Utilizando la IP del servidor. Comprobar que el servidor en: http://IP:8000 funciona correctamente (atenci\u00f3n, las im\u00e1genes no se ver\u00e1n, ni los archivos CSS, por ser archivos est\u00e1ticos: el servidor gunicorn no sirve archivos est\u00e1ticos). Una vez comprobado que funciona, vamos a crear la configuraci\u00f3n para lanzar gunicorn como demonio al arrancar la m\u00e1quina. Primero tenemos que crear el fichero de configuraci\u00f3n de gunicorn. Utilizaremos la carpeta que ya hemos creado, vamos a llamar ese fichero /usr/local/etc/locallibrary/gunicorn_conf.py . El contenido de este fichero debe ser el siguiente: command = '/home/django/projects/conta/.venv/bin/gunicorn' pythonpath = '/home/django/projects/conta' bind = 'IP:8000' workers = 3 user = 'django' group = 'django' daemon = True wsgi_app = 'conta.wsgi' pidfile = '/var/run/gunicorn.conta.pid' Sustituye la IP por la ip del servidor. Aqu\u00ed estamos indicando los par\u00e1metros para la ejecuci\u00f3n de gunicorn. Ahora tenemos que crear un servicio de arranque, y lo haremos en la carpeta /usr/local/etc/rc.d . Esta carpeta ya ha sido creada al instalar nginx, ya que contiene el fichero de arranque de nginx. Vamos a crear el fichero /usr/local/etc/rc.d/conta , con el siguiente contenido: #!/bin/sh # PROVIDE: locallibrary # REQUIRE: netif . /etc/rc.subr name=\"conta\" rcvar=\"${name}_enable\" pidfile=\"/var/run/gunicorn.conta.pid\" extra_commands=\"status\" start_cmd=\"/home/django/projects/conta/.venv/bin/gunicorn -c /usr/local/etc/conta/gunicorn_conf.py ; echo $name is now running on PID $(cat $pidfile)\" stop_cmd=\"kill $(cat $pidfile) ; echo $name is not running. ; rm $pidfile\" status_cmd=\"if [ -e $pidfile ]; then echo $name is running on PID $(cat $pidfile). ; return 1; fi; echo $name is not running. ; return 0\" load_rc_config $name run_rc_command \"$1\" Para m\u00e1s informaci\u00f3n sobre estos comandos, consultar la documentaci\u00f3n Practical rc.d scripting in BSD . Ahora tenemos que hacer este fichero ejecutable, y configurar el servicio para que arranque autom\u00e1ticamente: chmod +x /usr/local/etc/rc.d/conta sysrc conta=YES Ahora podemos arrancar el servicio con el comando: service conta start Otros comandos disponibles son: service conta stop # para el servicio service conta status # para saber el estado, si est\u00e1 arrancado o no","title":"Configuraci\u00f3n de gunicorn"},{"location":"manual_desarrollador/despliegue/#configuracion-nginx","text":"Ahora tenemos que configurar nginx para servir las p\u00e1ginas. Aqu\u00ed describo una configuraci\u00f3n sin certificados, ya que en mi caso utilizo un reverse proxy que es donde tengo configurado el certificado y protocolo https. Si no utilizas un reverse proxy , es conveniente que incluyas la configuraci\u00f3n con certificados en este servidor. En primer lugar, edita el fichero /usr/local/etc/nginx/nginx.con , reemplaza su contenido por el siguiente: worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; # Import server blocks for all subdomains include \"vdomains/*.conf\"; } Ahora hay que crear una carpeta /usr/local/etc/nginx/vdomains , que contendr\u00e1 los servidores para cada uno de los proyectos que tengamos. El primero que crearemos ser\u00e1 el servidor por defecto. Crea el fichero /usr/local/etc/nginx/vdomains/default.conf , con la siguiente configuraci\u00f3n: server { # if no Host match, close the connection to prevent host spoofing listen 80 default_server; return 444; } Esta configuraci\u00f3n hace que si llega una petici\u00f3n que no encaja con ninguno de los servidores configurados, cierra la conexi\u00f3n. Y ahora creamos el servidor para nuestro proyecto. Crea el fichero /usr/local/etc/nginx/vdomains/conta.conf , con la siguiente configuraci\u00f3n: server { listen 80; server_name DOMAIN; access_log /var/log/nginx/conta.access.log; error_log /var/log/nginx/conta.error.log; location / { proxy_pass http://IP:8000; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /static/ { alias /home/django/projects/conta/static/; } } Reemplaza IP por la ip de tu servidor, y DOMAIN por el dominio que utilices para alojar el servidor. F\u00edjate en la configuraci\u00f3n para los ficheros est\u00e1ticos: las peticiones que empiezan con el path /static/ son servidas directamente por nginx, utilizando como directorio ra\u00edz el directorio donde hemos puesto los ficheros est\u00e1ticos antes. Las dem\u00e1s peticiones son redirigidas a nuestro servidor gunicorn. Ahora configuramos el servicio nginx para arrancar autom\u00e1ticamente, y lo arrancamos: sysrc nginx_enable=yes service nginx start Si m\u00e1s adelante haces cambios en la configuraci\u00f3n de nginx, puedes forzar la relectura de la configuraci\u00f3n con el siguiente comando: service nginx reload Con esto estar\u00eda todo configurado para su correcto funcionamiento. No olvides utilizar un reverse proxy para asegurar una conexi\u00f3n segura https, o bien cambiar la configuraci\u00f3n de nginx para utilizar certificados y forzar el acceso a trav\u00e9s de https.","title":"Configuraci\u00f3n nginx"},{"location":"manual_desarrollador/despliegue/#uso-de-mariadb","text":"Para una aplicaci\u00f3n con pocos accesos, la base de datos sqlite es m\u00e1s que suficiente. Pero si esperas tener muchos accesos, o simplemente quieres hacerla m\u00e1s robusta, puedes utilizar mariadb como base de datos. Aqu\u00ed explico los cambios necesarios para realizarlo.","title":"Uso de mariadb"},{"location":"manual_desarrollador/despliegue/#instalacion-de-mariadb","text":"Primero hay que instalar mariadb: pkg install -y mariadb105-server # utiliza la \u00faltima versi\u00f3n disponible pip install mysqlclient Editar el fichero /usr/local/etc/mysql/my.cnf , y sustituir la siguiente l\u00ednea: # l\u00ednea a reemplazar: socket = /var/run/mysql/mysql.sock # nueva l\u00ednea: socket = /tmp/mysql.sock Ahora configuramos el servicio para empezar autom\u00e1ticamente, y lo arrancamos: sysrc mysql_enable=yes service mysql-server start","title":"Instalaci\u00f3n de mariadb"},{"location":"manual_desarrollador/despliegue/#securizacion-de-mariadb-y-creacion-de-la-base-de-datos","text":"Lanzamos el siguiente script para securizar la configuraci\u00f3n de mariadb, seg\u00fan recomendaci\u00f3n del fabricante: mysql_secure_installation --socket=/tmp/mysql.sock Acepta todos los valores por defecto, y crea un password de root para acceder a mariadb. Este password tendr\u00e1s que utilizarlo en el siguiente paso. Este escript implementa las mejores pr\u00e1cticas para securizar la base de datos. Ahora vamos a deshabilitar tambi\u00e9n el acceso remoto a la base de datos: sysrc mysql_args=\"--bind-address=127.0.0.1\" service mysql-server restart A continuaci\u00f3n creamos la base de datos: mysql -u root -p Entra el password de root que acabas de crear, y ahora entra los siguientes comandos para crear la base de datos: CREATE DATABASE conta CHARACTER SET UTF8; CREATE USER 'accountant'@'localhost' IDENTIFIED BY 'accountant-password'; GRANT ALL ON conta.* TO 'accountant'@'localhost'; FLUSH PRIVILEGES; exit Utiliza el nombre de base de datos, usuario y password de tu gusto. Estos los necesitaremos luego para la configuraci\u00f3n de django.","title":"Securizaci\u00f3n de mariadb, y creaci\u00f3n de la base de datos"},{"location":"manual_desarrollador/despliegue/#configuracion-de-django-base-de-datos","text":"Ahora tenemos que actualizar los ajustes de nuestro proyecto. Abre el fichero settings.py de nuestro proyecto, y reemplaza la antigua configuraci\u00f3n por la nueva: #### antigua configuraci\u00f3n (la que viene por defecto) ##### DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } ##### nueva configuraci\u00f3n ##### DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'conta', 'USER': 'accountant', 'PASSWORD': 'accountant-password', 'HOST': 'localhost', 'PORT': '', } } Aqu\u00ed es donde ponemos los valores que hemos utilizado antes. Para mayor seguridad, podemos poner el usuario y password de la base de datos en otro directorio, igual que hemos hecho con la clave secreta. En ese caso cambiamos la configuraci\u00f3n de la siguiente forma, crando tambi\u00e9n un fichero nuevo: # settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'OPTIONS': { 'read_default_file': '/usr/local/etc/conta/mariadb.cnf', }, } } # /usr/local/etc/conta/mariadb.cnf [client] database = conta user = accountant password = accountant-password default-character-set = utf8 Una vez realizados estos cambios en la configuraci\u00f3n, hay que correr las migraciones: python manage.py makemigrations python manage.py migrate Y finalmente volver a crear un superusuario: python manage.py createsuperuser","title":"Configuraci\u00f3n de Django - base de datos"},{"location":"manual_desarrollador/despliegue/#referencias","text":"Para crear esta gu\u00eda, he consultado los siguientes art\u00edculos y documentaci\u00f3n: Django project documentation Django deployment checklist Gunicorn configuration Practical rc.d scripting in BSD How To Use MySQL or MariaDB with your Django Application on Ubuntu 14.04","title":"Referencias"},{"location":"manual_desarrollador/documentacion/","text":"Documentaci\u00f3n La documentaci\u00f3n la he creado con el paquete MkDocs . Toda la documentaci\u00f3n est\u00e1 dentro de la carpeta docs, y el fichero de configuraci\u00f3n est\u00e1 en el directorio ra\u00edz: mkdocs.yml . Para cambiar la documentaci\u00f3n en tu repositorio, recuerda actualizar este fichero para que apunte a tu repositorio. Modifica, a\u00f1ade o quita la documentaci\u00f3n que necesites. Antes de subir los cambios, puedes ver c\u00f3mo queda ejecutando el siguiente comando desde el directorio ra\u00edz: mkdocs serve Y puedes ver la documentaci\u00f3n en: https://127.0.0.1:8000 Una vez validada la documentaci\u00f3n, la puedes subir autom\u00e1ticamente a tu repositorio con el comando: mkdocs build mkdocs gh-deploy Esto crear\u00e1 las p\u00e1ginas web a partir de los documentos markdown del directorio docs, y utilizar\u00e1 el comando git para subir esta documentaci\u00f3n a github, como una rama dentro de tu repositorio, para que est\u00e9 disponible.","title":"Documentaci\u00f3n"},{"location":"manual_desarrollador/documentacion/#documentacion","text":"La documentaci\u00f3n la he creado con el paquete MkDocs . Toda la documentaci\u00f3n est\u00e1 dentro de la carpeta docs, y el fichero de configuraci\u00f3n est\u00e1 en el directorio ra\u00edz: mkdocs.yml . Para cambiar la documentaci\u00f3n en tu repositorio, recuerda actualizar este fichero para que apunte a tu repositorio. Modifica, a\u00f1ade o quita la documentaci\u00f3n que necesites. Antes de subir los cambios, puedes ver c\u00f3mo queda ejecutando el siguiente comando desde el directorio ra\u00edz: mkdocs serve Y puedes ver la documentaci\u00f3n en: https://127.0.0.1:8000 Una vez validada la documentaci\u00f3n, la puedes subir autom\u00e1ticamente a tu repositorio con el comando: mkdocs build mkdocs gh-deploy Esto crear\u00e1 las p\u00e1ginas web a partir de los documentos markdown del directorio docs, y utilizar\u00e1 el comando git para subir esta documentaci\u00f3n a github, como una rama dentro de tu repositorio, para que est\u00e9 disponible.","title":"Documentaci\u00f3n"},{"location":"manual_desarrollador/estructura/","text":"Estructura del repositorio Este repositorio tiene la siguiente estructura: git \u251c\u2500\u2500analysis \u251c\u2500\u2500conta \u2502 \u251c\u2500\u2500conta \u2502 \u2514\u2500\u2500main \u2514\u2500\u2500docs analysis : contiene algunos archivos utilizados para pruebas, o an\u00e1lisis de plantillas y formatos. Tambi\u00e9n un notebook de Jupyter donde pruebo algunas funciones antes de implementarlas en el programa. conta : es la carpeta con toda la estructura de django. Dentro de ella tenemos dos carpetas principales: conta : contiene la configuraci\u00f3n global del sitio web main : es una aplicaci\u00f3n dentro de django, que es la que contiene realmente toda la aplicaci\u00f3n. docs : toda la documentaci\u00f3n, estructurada en ficheros .md, para generar las p\u00e1ginas de ayuda mediante mkdocs . La estructura de directorios es la propia de un proyecto django. Ver la documentaci\u00f3n de django para m\u00e1s informaci\u00f3n. Adem\u00e1s de la estructura por defecto, he creado alg\u00fan fichero o carpeta nueva: tests : en esta carpeta est\u00e1n todos los ficheros de tests. Incluye tambi\u00e9n una subcarpeta con ficheros que se utilizan para hacer los tests, para subir plantillas y ficheros de cuentas (con o sin errores). functions.py : este fichero contiene funciones para el procesado de datos, adicionales a las funciones dentro del fichero de views.py .","title":"Estructura repositorio"},{"location":"manual_desarrollador/estructura/#estructura-del-repositorio","text":"Este repositorio tiene la siguiente estructura: git \u251c\u2500\u2500analysis \u251c\u2500\u2500conta \u2502 \u251c\u2500\u2500conta \u2502 \u2514\u2500\u2500main \u2514\u2500\u2500docs analysis : contiene algunos archivos utilizados para pruebas, o an\u00e1lisis de plantillas y formatos. Tambi\u00e9n un notebook de Jupyter donde pruebo algunas funciones antes de implementarlas en el programa. conta : es la carpeta con toda la estructura de django. Dentro de ella tenemos dos carpetas principales: conta : contiene la configuraci\u00f3n global del sitio web main : es una aplicaci\u00f3n dentro de django, que es la que contiene realmente toda la aplicaci\u00f3n. docs : toda la documentaci\u00f3n, estructurada en ficheros .md, para generar las p\u00e1ginas de ayuda mediante mkdocs . La estructura de directorios es la propia de un proyecto django. Ver la documentaci\u00f3n de django para m\u00e1s informaci\u00f3n. Adem\u00e1s de la estructura por defecto, he creado alg\u00fan fichero o carpeta nueva: tests : en esta carpeta est\u00e1n todos los ficheros de tests. Incluye tambi\u00e9n una subcarpeta con ficheros que se utilizan para hacer los tests, para subir plantillas y ficheros de cuentas (con o sin errores). functions.py : este fichero contiene funciones para el procesado de datos, adicionales a las funciones dentro del fichero de views.py .","title":"Estructura del repositorio"},{"location":"manual_desarrollador/tests/","text":"Tests Paquetes utilizados y estructura Para hacer los tests del entorno, utilizo el framework de pytest, y la librer\u00eda WebTest para hacer tests que utilizan formularios, lo cual me permite validar las funciones post, y alguna funci\u00f3n m\u00e1s avanzada que las del entorno test de django. Tambi\u00e9n utlizo el programa Coverage , para identificar la cobertura de los tests. Los tests est\u00e1n organizados en 3 carpetas, para agruparlos: models : contiene los tests para validar los modelos de datos creados views : contiene los tests para validar las views. A trav\u00e9s de las views se testean todas las dem\u00e1s funciones de procesado de datos, tambi\u00e9n las incluidas en functions.py . functions : contiene los tests unitarios para las funciones del fichero functions.py . Aunque ya est\u00e1 parcialmente testeado a trav\u00e9s de las views, es interesante tener tests unitarios para cada funci\u00f3n, para poder detectar posibles problemas. Dentro de cada carpeta he creado un fichero para cada funci\u00f3n o clase (sea vista, modelo o funci\u00f3n). La \u00fanica excepci\u00f3n es en la carpeta functions, donde he agrupado las funciones por funcionalidad, ya que de esta forma puedo utilizar los mismos fixtures. Las fixtures que aplican a varios tests las defino dentro de cada carpeta, aunque estoy pensando en consolidarlas todas en un \u00fanico fichero para todos los tests. Las fixtures que son muy espec\u00edficas de una funci\u00f3n o clase, las defino dentro de su clase. Hay una clase para cada vista, y una clase para cada modelo, y una clase para cada funci\u00f3n. Dentro de la clase se hacen todos los tests relacionados con la vista, modelo o funci\u00f3n. Configuraci\u00f3n La configuraci\u00f3n de coverage est\u00e1 en el fichero conta/.coverage.rc . Ah\u00ed est\u00e1n los par\u00e1metros utilizados. Lo m\u00e1s importante es identificar los ficheros a excluir, para poder obtener una cobertura del 100% de nuestro c\u00f3digo, dejando fuera los ficheros de configuraci\u00f3n y otros est\u00e1ndares de django. La configuraci\u00f3n de pytest est\u00e1 en el fichero conta/pytest.ini . El fichero da los par\u00e1metros a utilizar para el comando pytest, y define el fichero de configuraci\u00f3n a utilizar. Puedes apuntar al fichero est\u00e1ndar, pero para agilizar los tests es mejor crear una configuraci\u00f3n de test con la base de datos en memoria, en lugar de la base de datos en disco. El siguiente fichero importante es el de la configuraci\u00f3n (settings) para los tests, en la misma carpeta que el fichero est\u00e1ndar, conta/settings_test.py . Ejecuci\u00f3n Para ejecutar los tests, ir al directorio del programa de django y ejecutar pytest : cd /conta pytest Esto permite luego obtener un informe de la cobertura en formato html en la carpeta conta/htmlcov , con un fichero conta/htmlcov/index.html que contiene informaci\u00f3n detallada de qu\u00e9 l\u00edneas de c\u00f3digo no han sido testeadas. De esta forma nos aseguramos de testear todos los casos, funciones, y ramas de nuestro programa. Para ejecutar solo algunos tests, hay que utilizar la opci\u00f3n -k de pyest, con una cadena o patr\u00f3n. En ese caso, s\u00f3lo se ejecutar\u00e1n los tests que tengan la cadena en su nombre. Ojo, eso incluye tambi\u00e9n la carpeta y el nombre de archivo. Se pueden usar operadores and y or, as\u00ed: cd /conta pytest -k \"test_cargar_cuentas and TestExtraerCuenta\"","title":"Tests"},{"location":"manual_desarrollador/tests/#tests","text":"","title":"Tests"},{"location":"manual_desarrollador/tests/#paquetes-utilizados-y-estructura","text":"Para hacer los tests del entorno, utilizo el framework de pytest, y la librer\u00eda WebTest para hacer tests que utilizan formularios, lo cual me permite validar las funciones post, y alguna funci\u00f3n m\u00e1s avanzada que las del entorno test de django. Tambi\u00e9n utlizo el programa Coverage , para identificar la cobertura de los tests. Los tests est\u00e1n organizados en 3 carpetas, para agruparlos: models : contiene los tests para validar los modelos de datos creados views : contiene los tests para validar las views. A trav\u00e9s de las views se testean todas las dem\u00e1s funciones de procesado de datos, tambi\u00e9n las incluidas en functions.py . functions : contiene los tests unitarios para las funciones del fichero functions.py . Aunque ya est\u00e1 parcialmente testeado a trav\u00e9s de las views, es interesante tener tests unitarios para cada funci\u00f3n, para poder detectar posibles problemas. Dentro de cada carpeta he creado un fichero para cada funci\u00f3n o clase (sea vista, modelo o funci\u00f3n). La \u00fanica excepci\u00f3n es en la carpeta functions, donde he agrupado las funciones por funcionalidad, ya que de esta forma puedo utilizar los mismos fixtures. Las fixtures que aplican a varios tests las defino dentro de cada carpeta, aunque estoy pensando en consolidarlas todas en un \u00fanico fichero para todos los tests. Las fixtures que son muy espec\u00edficas de una funci\u00f3n o clase, las defino dentro de su clase. Hay una clase para cada vista, y una clase para cada modelo, y una clase para cada funci\u00f3n. Dentro de la clase se hacen todos los tests relacionados con la vista, modelo o funci\u00f3n.","title":"Paquetes utilizados y estructura"},{"location":"manual_desarrollador/tests/#configuracion","text":"La configuraci\u00f3n de coverage est\u00e1 en el fichero conta/.coverage.rc . Ah\u00ed est\u00e1n los par\u00e1metros utilizados. Lo m\u00e1s importante es identificar los ficheros a excluir, para poder obtener una cobertura del 100% de nuestro c\u00f3digo, dejando fuera los ficheros de configuraci\u00f3n y otros est\u00e1ndares de django. La configuraci\u00f3n de pytest est\u00e1 en el fichero conta/pytest.ini . El fichero da los par\u00e1metros a utilizar para el comando pytest, y define el fichero de configuraci\u00f3n a utilizar. Puedes apuntar al fichero est\u00e1ndar, pero para agilizar los tests es mejor crear una configuraci\u00f3n de test con la base de datos en memoria, en lugar de la base de datos en disco. El siguiente fichero importante es el de la configuraci\u00f3n (settings) para los tests, en la misma carpeta que el fichero est\u00e1ndar, conta/settings_test.py .","title":"Configuraci\u00f3n"},{"location":"manual_desarrollador/tests/#ejecucion","text":"Para ejecutar los tests, ir al directorio del programa de django y ejecutar pytest : cd /conta pytest Esto permite luego obtener un informe de la cobertura en formato html en la carpeta conta/htmlcov , con un fichero conta/htmlcov/index.html que contiene informaci\u00f3n detallada de qu\u00e9 l\u00edneas de c\u00f3digo no han sido testeadas. De esta forma nos aseguramos de testear todos los casos, funciones, y ramas de nuestro programa. Para ejecutar solo algunos tests, hay que utilizar la opci\u00f3n -k de pyest, con una cadena o patr\u00f3n. En ese caso, s\u00f3lo se ejecutar\u00e1n los tests que tengan la cadena en su nombre. Ojo, eso incluye tambi\u00e9n la carpeta y el nombre de archivo. Se pueden usar operadores and y or, as\u00ed: cd /conta pytest -k \"test_cargar_cuentas and TestExtraerCuenta\"","title":"Ejecuci\u00f3n"},{"location":"manual_usuario/asientos/","text":"Asientos La plantalla de Asientos est\u00e1 dividia en varias partes: a la izquierda tenemos una serie de men\u00fas que nos permiten varias acciones, como filtrar o cargar un fichero. arriba tenemos un formulario que nos permite entrar un nuevo asiento simple. y en la parte central de la pantalla tenemos el listado de asientos / movimientos. 1. Men\u00fas laterales Filtro : permite filtrar los movimientos a mostrar. Puedes filtrar por cualquiera de los campos indicados. Las fechas indican el rango de fechas a utilizar (fecha inicial y fecha final). En la descripci\u00f3n, el filtro buscar\u00e1 los movimientos en los que la palabra o frase de la descripci\u00f3n forma parte de la descripci\u00f3n. Y los campos cuenta y asiento buscan el n\u00famero exacto de la cuenta o asiento. Se pueden rellenar m\u00e1s de un campo. Para filtrar pulsar el bot\u00f3n de aplicar el filtro. El filtro se queda activo incluso si se cambia de pantalla. El bot\u00f3n de borrar elimina el filtro y muestra otra vez todas las cuentas. La cuenta se puede escoger de un men\u00fa dropdown que muestra todas las cuentas existentes. Cargar asientos : se pueden crear movimientos a partir de un fichero excel. En este submen\u00fa se escoge el fichero a cargar, y se confirma con el bot\u00f3n verde. El formato del fichero est\u00e1 explicado m\u00e1s abajo . 2. Formulario nuevo asiento Este formulario permite crear un nuevo asiento simple, es decir formado por dos movimientos. A partir de los campos de la fecha, descripci\u00f3n, valor, y las dos cuentas, se crean un asiento con cada cuenta, tomando el valor como debe en un caso, y haber en el otro. La cuenta se puede escoger de un men\u00fa dropdown que muestra todas las cuentas existentes. 3. Pantalla principal En esta pantalla vemos una lista de todos los movimientos. El listado est\u00e1 divido en p\u00e1ginas, de momento no se puede escoger el tama\u00f1o de p\u00e1gina, est\u00e1 fijado a 15 entradas por p\u00e1gina. Pinchando el t\u00edtulo de la columna permite cambiar el orden de la tabla. El campo utilizado para ordenar tiene al lado una flecha indicando si el orden es ascendiente o descendiente. Pinchando de nuevo sobre el campo cambia el orden de ascendiente a descendiente o viceversa. La papelera roja a la derecha de cada movimiento permite borrar el movimiento. Tambi\u00e9n se pueden borrar m\u00faltiples movimientos seleccion\u00e1ndolos, y pulsando la papelera que hay arriba. El checkbox que hay al lado de esa papelera sirve para seleccionar / deseleccionar todos los movimientos de la p\u00e1gina. Pinchando en cualquier campo de la tabla, se puede modificar el asiento. Esto abre una nueva pantalla con un formulario que permite modificar los campos de todos los movimientos asociados al mismo n\u00famero de asiento. Se puede modificar cualquier campo, y se pueden a\u00f1adir movimientos pinchando el bot\u00f3n azul, y eliminar movimientos pulsando la papelera roja al lado de cada movimiento. El bot\u00f3n verde para guardar los cambios, y el rojo para cancelar y volver atr\u00e1s. Formato plantilla asientos Para la carga de cuentas desde un fichero excel, se propone una plantilla con dos pesta\u00f1as, para poder cargar tanto asientos simples como asientos complejos. La pesta\u00f1a de asientos simples debe tener el siguiente formato: El nombre de la pesta\u00f1a con las cuentas debe ser: \"simple\". Si no existe una pesta\u00f1a con este nombre no se cargar\u00e1 ning\u00fan asiento simple. Se utilizan las columnas B:F. La columna A se ignora. Los t\u00edtulos de las columnas est\u00e1n en la fila 3. Las filas 1 y 2 se ignoran. Los t\u00edtulos deben ser los siguientes: Fecha : contiene la fecha de la transacci\u00f3n. Descripci\u00f3n : una descripci\u00f3n. Valor : es el valor de la transacci\u00f3n. Debe : es el n\u00famero de la cuenta que corresponde al debe. Al crear los movimientos, en esta cuenta el valor pondr\u00e1 en el campo debe . Haber : es el n\u00famero de la cuenta que corresponde al debe. Al crear los movimientos, en esta cuenta el valor pondr\u00e1 en el campo haber . Cada l\u00ednea de esta tabla se traduce en un asiento de dos movimientos: uno con la cuenta debe y el valor en el campo debe (y nulo en el campo haber), y otro con la cuenta haber y el valor en el campo haber (y nulo en el campo debe). Los n\u00fameros de asiento se crean autom\u00e1ticamente, ser\u00e1n consecutivos a partir del n\u00famero de asiento m\u00e1s alto que exista antes de la carga del fichero. La pesta\u00f1a de asientos complejos debe tener el siguiente formato: El nombre de la pesta\u00f1a con las cuentas debe ser: \"compleja\". Si no existe una pesta\u00f1a con este nombre no se cargar\u00e1 ning\u00fan asiento complejo. Se utilizan las columnas B:G. La columna A se ignora. Los t\u00edtulos de las columnas est\u00e1n en la fila 3. Las filas 1 y 2 se ignoran. Los t\u00edtulos deben ser los siguientes (correspondientes a los campos que tiene un movimiento): id : n\u00famero de asiento Fecha : contiene la fecha de la transacci\u00f3n. Descripci\u00f3n : una descripci\u00f3n. Debe : valor que va en el debe del movimiento. Haber : valor que va en el haber del movimiento. Cuenta : n\u00famero de cuenta asociado al movimiento. En este caso debemos entrar el n\u00famero de asiento, ya que cada asiento puede tener varios movimientos. Empezar a numerar los asientos a partir del n\u00famero 1. A la hora de a\u00f1adir los movimientos a nuestra base de datos, la aplicaci\u00f3n tomar\u00e1 el n\u00famero de asiento m\u00e1s alto existente y le a\u00f1adir\u00e1 el n\u00famero de asiento proporcionado en la plantilla. Hay un ejemplo de fichero excel a utilizar como plantilla en el repositorio de github. El mismo fichero tambi\u00e9n sirve para cargar las cuentas, como se describe m\u00e1s adelante.","title":"Asientos"},{"location":"manual_usuario/asientos/#asientos","text":"La plantalla de Asientos est\u00e1 dividia en varias partes: a la izquierda tenemos una serie de men\u00fas que nos permiten varias acciones, como filtrar o cargar un fichero. arriba tenemos un formulario que nos permite entrar un nuevo asiento simple. y en la parte central de la pantalla tenemos el listado de asientos / movimientos.","title":"Asientos"},{"location":"manual_usuario/asientos/#1-menus-laterales","text":"Filtro : permite filtrar los movimientos a mostrar. Puedes filtrar por cualquiera de los campos indicados. Las fechas indican el rango de fechas a utilizar (fecha inicial y fecha final). En la descripci\u00f3n, el filtro buscar\u00e1 los movimientos en los que la palabra o frase de la descripci\u00f3n forma parte de la descripci\u00f3n. Y los campos cuenta y asiento buscan el n\u00famero exacto de la cuenta o asiento. Se pueden rellenar m\u00e1s de un campo. Para filtrar pulsar el bot\u00f3n de aplicar el filtro. El filtro se queda activo incluso si se cambia de pantalla. El bot\u00f3n de borrar elimina el filtro y muestra otra vez todas las cuentas. La cuenta se puede escoger de un men\u00fa dropdown que muestra todas las cuentas existentes. Cargar asientos : se pueden crear movimientos a partir de un fichero excel. En este submen\u00fa se escoge el fichero a cargar, y se confirma con el bot\u00f3n verde. El formato del fichero est\u00e1 explicado m\u00e1s abajo .","title":"1. Men\u00fas laterales"},{"location":"manual_usuario/asientos/#2-formulario-nuevo-asiento","text":"Este formulario permite crear un nuevo asiento simple, es decir formado por dos movimientos. A partir de los campos de la fecha, descripci\u00f3n, valor, y las dos cuentas, se crean un asiento con cada cuenta, tomando el valor como debe en un caso, y haber en el otro. La cuenta se puede escoger de un men\u00fa dropdown que muestra todas las cuentas existentes.","title":"2. Formulario nuevo asiento"},{"location":"manual_usuario/asientos/#3-pantalla-principal","text":"En esta pantalla vemos una lista de todos los movimientos. El listado est\u00e1 divido en p\u00e1ginas, de momento no se puede escoger el tama\u00f1o de p\u00e1gina, est\u00e1 fijado a 15 entradas por p\u00e1gina. Pinchando el t\u00edtulo de la columna permite cambiar el orden de la tabla. El campo utilizado para ordenar tiene al lado una flecha indicando si el orden es ascendiente o descendiente. Pinchando de nuevo sobre el campo cambia el orden de ascendiente a descendiente o viceversa. La papelera roja a la derecha de cada movimiento permite borrar el movimiento. Tambi\u00e9n se pueden borrar m\u00faltiples movimientos seleccion\u00e1ndolos, y pulsando la papelera que hay arriba. El checkbox que hay al lado de esa papelera sirve para seleccionar / deseleccionar todos los movimientos de la p\u00e1gina. Pinchando en cualquier campo de la tabla, se puede modificar el asiento. Esto abre una nueva pantalla con un formulario que permite modificar los campos de todos los movimientos asociados al mismo n\u00famero de asiento. Se puede modificar cualquier campo, y se pueden a\u00f1adir movimientos pinchando el bot\u00f3n azul, y eliminar movimientos pulsando la papelera roja al lado de cada movimiento. El bot\u00f3n verde para guardar los cambios, y el rojo para cancelar y volver atr\u00e1s.","title":"3. Pantalla principal"},{"location":"manual_usuario/asientos/#formato-plantilla-asientos","text":"Para la carga de cuentas desde un fichero excel, se propone una plantilla con dos pesta\u00f1as, para poder cargar tanto asientos simples como asientos complejos. La pesta\u00f1a de asientos simples debe tener el siguiente formato: El nombre de la pesta\u00f1a con las cuentas debe ser: \"simple\". Si no existe una pesta\u00f1a con este nombre no se cargar\u00e1 ning\u00fan asiento simple. Se utilizan las columnas B:F. La columna A se ignora. Los t\u00edtulos de las columnas est\u00e1n en la fila 3. Las filas 1 y 2 se ignoran. Los t\u00edtulos deben ser los siguientes: Fecha : contiene la fecha de la transacci\u00f3n. Descripci\u00f3n : una descripci\u00f3n. Valor : es el valor de la transacci\u00f3n. Debe : es el n\u00famero de la cuenta que corresponde al debe. Al crear los movimientos, en esta cuenta el valor pondr\u00e1 en el campo debe . Haber : es el n\u00famero de la cuenta que corresponde al debe. Al crear los movimientos, en esta cuenta el valor pondr\u00e1 en el campo haber . Cada l\u00ednea de esta tabla se traduce en un asiento de dos movimientos: uno con la cuenta debe y el valor en el campo debe (y nulo en el campo haber), y otro con la cuenta haber y el valor en el campo haber (y nulo en el campo debe). Los n\u00fameros de asiento se crean autom\u00e1ticamente, ser\u00e1n consecutivos a partir del n\u00famero de asiento m\u00e1s alto que exista antes de la carga del fichero. La pesta\u00f1a de asientos complejos debe tener el siguiente formato: El nombre de la pesta\u00f1a con las cuentas debe ser: \"compleja\". Si no existe una pesta\u00f1a con este nombre no se cargar\u00e1 ning\u00fan asiento complejo. Se utilizan las columnas B:G. La columna A se ignora. Los t\u00edtulos de las columnas est\u00e1n en la fila 3. Las filas 1 y 2 se ignoran. Los t\u00edtulos deben ser los siguientes (correspondientes a los campos que tiene un movimiento): id : n\u00famero de asiento Fecha : contiene la fecha de la transacci\u00f3n. Descripci\u00f3n : una descripci\u00f3n. Debe : valor que va en el debe del movimiento. Haber : valor que va en el haber del movimiento. Cuenta : n\u00famero de cuenta asociado al movimiento. En este caso debemos entrar el n\u00famero de asiento, ya que cada asiento puede tener varios movimientos. Empezar a numerar los asientos a partir del n\u00famero 1. A la hora de a\u00f1adir los movimientos a nuestra base de datos, la aplicaci\u00f3n tomar\u00e1 el n\u00famero de asiento m\u00e1s alto existente y le a\u00f1adir\u00e1 el n\u00famero de asiento proporcionado en la plantilla. Hay un ejemplo de fichero excel a utilizar como plantilla en el repositorio de github. El mismo fichero tambi\u00e9n sirve para cargar las cuentas, como se describe m\u00e1s adelante.","title":"Formato plantilla asientos"},{"location":"manual_usuario/bienvenida/","text":"Bienvenida y login La aplicaci\u00f3n empieza con la pantalla principal, que es solo una imagen, y un men\u00fa arriba para acceder a las diferentes \u00e1reas. La aplicaci\u00f3n requiere que el usuario est\u00e9 autentificado en el sistema. Utilizo el sistema de usuarios propio de django, y la gesti\u00f3n de usuarios (creaci\u00f3n, modificaci\u00f3n, eliminaci\u00f3n) se hace a trav\u00e9s de la pantalla de admin del propio django, que se puede acceder a trav\u00e9s de del URL /admin/ . Ah\u00ed se pueden crear usuarios adicionales. De momento no utilizo un sistema de permisos m\u00e1s complejo, y todos los usuarios acceden a la misma informaci\u00f3n, es decir los movimientos y cuentas no est\u00e1n separados por usuarios. Quiz\u00e1s m\u00e1s adelante evolucione hacia un sistema multi-usuario, con cada usuario asociado a su propia contabilidad. El logo de la aplicaci\u00f3n est\u00e1 a la izquierda del men\u00fa, y pulsando en \u00e9l vuelve a la p\u00e1gina principal, con la imagen. En el men\u00fa podemos ver las siguientes opciones: Cuentas: para editar las cuentas. Permite alta, baja y modificaci\u00f3n de cuentas. Tambi\u00e9n permite editar las etiquetas asignadas a las cuentas, y crear, borrar o modificar etiquetas. Asientos: para editar los asientos o movimientos. Permite alta, baja y modificaci\u00f3n de movimientos. Incluye un filtro para limitar los movimientos que podemos ver (p.e. por cuenta, por fechas, etc.). Informes: para analizar las cuentas, ver los totales de varias formas. Los informes pueden ser sobre una cuenta, o un grupo de cuentas con una etiqueta, y pueden ser con totales diarios, semanales, mensuales, trimestrales y anuales.","title":"Bienvenida y login"},{"location":"manual_usuario/bienvenida/#bienvenida-y-login","text":"La aplicaci\u00f3n empieza con la pantalla principal, que es solo una imagen, y un men\u00fa arriba para acceder a las diferentes \u00e1reas. La aplicaci\u00f3n requiere que el usuario est\u00e9 autentificado en el sistema. Utilizo el sistema de usuarios propio de django, y la gesti\u00f3n de usuarios (creaci\u00f3n, modificaci\u00f3n, eliminaci\u00f3n) se hace a trav\u00e9s de la pantalla de admin del propio django, que se puede acceder a trav\u00e9s de del URL /admin/ . Ah\u00ed se pueden crear usuarios adicionales. De momento no utilizo un sistema de permisos m\u00e1s complejo, y todos los usuarios acceden a la misma informaci\u00f3n, es decir los movimientos y cuentas no est\u00e1n separados por usuarios. Quiz\u00e1s m\u00e1s adelante evolucione hacia un sistema multi-usuario, con cada usuario asociado a su propia contabilidad. El logo de la aplicaci\u00f3n est\u00e1 a la izquierda del men\u00fa, y pulsando en \u00e9l vuelve a la p\u00e1gina principal, con la imagen. En el men\u00fa podemos ver las siguientes opciones: Cuentas: para editar las cuentas. Permite alta, baja y modificaci\u00f3n de cuentas. Tambi\u00e9n permite editar las etiquetas asignadas a las cuentas, y crear, borrar o modificar etiquetas. Asientos: para editar los asientos o movimientos. Permite alta, baja y modificaci\u00f3n de movimientos. Incluye un filtro para limitar los movimientos que podemos ver (p.e. por cuenta, por fechas, etc.). Informes: para analizar las cuentas, ver los totales de varias formas. Los informes pueden ser sobre una cuenta, o un grupo de cuentas con una etiqueta, y pueden ser con totales diarios, semanales, mensuales, trimestrales y anuales.","title":"Bienvenida y login"},{"location":"manual_usuario/cuentas/","text":"Cuentas La plantalla de Cuentas est\u00e1 dividia en varias partes: a la izquierda tenemos una serie de men\u00fas que nos permiten varias acciones, como filtrar, cargar un fichero o gestionar las etiquetas. arriba tenemos un formulario que nos permite entrar una nueva cuenta y en la parte central de la pantalla tenemos el listado de cuentas. 1. Men\u00fas laterales Filtro : permite filtrar las cuentas a mostrar. Puedes filtrar por n\u00famero de cuenta, nombre o etiqueta. Se pueden rellenar m\u00e1s de un campo. Para filtrar pulsar el bot\u00f3n de aplicar el filtro. El filtro se queda activo incluso si se cambia de pantalla. El bot\u00f3n de borrar elimina el filtro y muestra otra vez todas las cuentas. Cargar cuentas : se pueden crear cuentas a partir de un fichero excel. En este submen\u00fa se escoge el fichero a cargar, y se confirma con el bot\u00f3n verde. El formato del fichero est\u00e1 explicado m\u00e1s abajo . Etiquetas : formulario para crear etiquetas nuevas o borrar una existente. Para crear una nueva etiqueta, entrar el nombre de la etiqueta, y una descripci\u00f3n m\u00e1s larga. Esa descripci\u00f3n servir\u00e1 de t\u00edtulo a la hora de generar los informes. Luego pulsar el bot\u00f3n verde. Para borrar una etiqueta existente entrar el nombre de la etiqueta que se quiere borrar, y pulsar el bot\u00f3n rojo. Al borrar una etiqueta, se eliminar\u00e1 de todas las cuentas donde exista. El nombre de la etiqueta se puede escoger de un men\u00fa dropdown que muestra todas las etiquetas existentes. 2. Formulario nueva cuenta Para crear una nueva cuenta, hay que entrar obligatoriamente el n\u00famero de cuenta y la descripci\u00f3n. La(s) etiqueta(s) son opcionales. Para entrar m\u00e1s de una etiqueta, separarlas por comas. La etiqueta se puede escoger de un men\u00fa dropdown que muestra todas las etiquetas existentes. 3. Pantalla principal En esta pantalla vemos una lista de todas las cuentas. El listado est\u00e1 divido en p\u00e1ginas, de momento no se puede escoger el tama\u00f1o de p\u00e1gina, est\u00e1 fijado a 15 entradas por p\u00e1gina. Pinchando el t\u00edtulo de la columna permite cambiar el orden de la tabla. El campo utilizado para ordenar tiene al lado una flecha indicando si el orden es ascendiente o descendiente. Pinchando de nuevo sobre el campo cambia el orden de ascendiente a descendiente o viceversa. La papelera roja a la derecha de cada cuenta permite borrar la cuenta. Tambi\u00e9n se pueden borrar m\u00faltiples cuentas seleccion\u00e1ndolas, y pulsando la papelera que hay arriba. El checkbox que hay al lado de esa papelera sirve para seleccionar / deseleccionar todas las cuentas de la p\u00e1gina. Pinchando en cualquier campo de la tabla (n\u00famero, cuenta, etiqueta), se puede modificar la cuenta. Esto abre una nueva pantalla con un formulario que permite modificar los campos de la cuenta. El \u00fanico campo que no se puede modificar es el n\u00famero. Se pueden a\u00f1adir / borrar etiquetas, y modificar el nombre de la cuenta. El bot\u00f3n verde para guardar los cambios, y el rojo para cancelar y volver atr\u00e1s. Formato plantilla cuentas Para la carga de cuentas desde un fichero excel, este debe tener el siguiente formato: El nombre de la pesta\u00f1a con las cuentas debe ser: \"cuentas\". Si no existe una pesta\u00f1a con este nombre no se cargar\u00e1 ninguna cuenta. La informaci\u00f3n debe estar en las 3 primeras columnas de la hoja (A:C). La primera fila contiene los nombres de las columnas, no importa el nombre que se ponga. Las 3 columnas corresponden a los 3 campos de las cuentas. Las etiquetas van separadas por comas. Hay un ejemplo de fichero excel a utilizar como plantilla en el repositorio de github. El mismo fichero tambi\u00e9n sirve para cargar los asientos, como se describe m\u00e1s adelante.","title":"Cuentas"},{"location":"manual_usuario/cuentas/#cuentas","text":"La plantalla de Cuentas est\u00e1 dividia en varias partes: a la izquierda tenemos una serie de men\u00fas que nos permiten varias acciones, como filtrar, cargar un fichero o gestionar las etiquetas. arriba tenemos un formulario que nos permite entrar una nueva cuenta y en la parte central de la pantalla tenemos el listado de cuentas.","title":"Cuentas"},{"location":"manual_usuario/cuentas/#1-menus-laterales","text":"Filtro : permite filtrar las cuentas a mostrar. Puedes filtrar por n\u00famero de cuenta, nombre o etiqueta. Se pueden rellenar m\u00e1s de un campo. Para filtrar pulsar el bot\u00f3n de aplicar el filtro. El filtro se queda activo incluso si se cambia de pantalla. El bot\u00f3n de borrar elimina el filtro y muestra otra vez todas las cuentas. Cargar cuentas : se pueden crear cuentas a partir de un fichero excel. En este submen\u00fa se escoge el fichero a cargar, y se confirma con el bot\u00f3n verde. El formato del fichero est\u00e1 explicado m\u00e1s abajo . Etiquetas : formulario para crear etiquetas nuevas o borrar una existente. Para crear una nueva etiqueta, entrar el nombre de la etiqueta, y una descripci\u00f3n m\u00e1s larga. Esa descripci\u00f3n servir\u00e1 de t\u00edtulo a la hora de generar los informes. Luego pulsar el bot\u00f3n verde. Para borrar una etiqueta existente entrar el nombre de la etiqueta que se quiere borrar, y pulsar el bot\u00f3n rojo. Al borrar una etiqueta, se eliminar\u00e1 de todas las cuentas donde exista. El nombre de la etiqueta se puede escoger de un men\u00fa dropdown que muestra todas las etiquetas existentes.","title":"1. Men\u00fas laterales"},{"location":"manual_usuario/cuentas/#2-formulario-nueva-cuenta","text":"Para crear una nueva cuenta, hay que entrar obligatoriamente el n\u00famero de cuenta y la descripci\u00f3n. La(s) etiqueta(s) son opcionales. Para entrar m\u00e1s de una etiqueta, separarlas por comas. La etiqueta se puede escoger de un men\u00fa dropdown que muestra todas las etiquetas existentes.","title":"2. Formulario nueva cuenta"},{"location":"manual_usuario/cuentas/#3-pantalla-principal","text":"En esta pantalla vemos una lista de todas las cuentas. El listado est\u00e1 divido en p\u00e1ginas, de momento no se puede escoger el tama\u00f1o de p\u00e1gina, est\u00e1 fijado a 15 entradas por p\u00e1gina. Pinchando el t\u00edtulo de la columna permite cambiar el orden de la tabla. El campo utilizado para ordenar tiene al lado una flecha indicando si el orden es ascendiente o descendiente. Pinchando de nuevo sobre el campo cambia el orden de ascendiente a descendiente o viceversa. La papelera roja a la derecha de cada cuenta permite borrar la cuenta. Tambi\u00e9n se pueden borrar m\u00faltiples cuentas seleccion\u00e1ndolas, y pulsando la papelera que hay arriba. El checkbox que hay al lado de esa papelera sirve para seleccionar / deseleccionar todas las cuentas de la p\u00e1gina. Pinchando en cualquier campo de la tabla (n\u00famero, cuenta, etiqueta), se puede modificar la cuenta. Esto abre una nueva pantalla con un formulario que permite modificar los campos de la cuenta. El \u00fanico campo que no se puede modificar es el n\u00famero. Se pueden a\u00f1adir / borrar etiquetas, y modificar el nombre de la cuenta. El bot\u00f3n verde para guardar los cambios, y el rojo para cancelar y volver atr\u00e1s.","title":"3. Pantalla principal"},{"location":"manual_usuario/cuentas/#formato-plantilla-cuentas","text":"Para la carga de cuentas desde un fichero excel, este debe tener el siguiente formato: El nombre de la pesta\u00f1a con las cuentas debe ser: \"cuentas\". Si no existe una pesta\u00f1a con este nombre no se cargar\u00e1 ninguna cuenta. La informaci\u00f3n debe estar en las 3 primeras columnas de la hoja (A:C). La primera fila contiene los nombres de las columnas, no importa el nombre que se ponga. Las 3 columnas corresponden a los 3 campos de las cuentas. Las etiquetas van separadas por comas. Hay un ejemplo de fichero excel a utilizar como plantilla en el repositorio de github. El mismo fichero tambi\u00e9n sirve para cargar los asientos, como se describe m\u00e1s adelante.","title":"Formato plantilla cuentas"},{"location":"manual_usuario/funcionamiento/","text":"Mecanismo de funcionamiento Teor\u00eda Esta aplicaci\u00f3n funciona con los mismos principios de contabilidad que pueda utilizar una empresa, pero de forma muy simplificada. B\u00e1sicamente, tenemos 3 tipos de informaci\u00f3n: Los movimientos: son las transacciones de dinero. Registran el movimiento de dinero entre dos o m\u00e1s cuentas. Los movimientos se agrupan por asiento, siendo cada asiento de uno o m\u00e1s movimientos. Las cuentas: son las que contienen el dinero. Puede haber cuentas de gastos, es decir que registran los gastos que tenemos, como por ejemplo: \"Gastos de la casa\", \"Comida\", \"Ropa\", o \"Viajes\"; otras cuentas de ingresos, como por ejemplo: \"N\u00f3mina del trabajo\", o \"Intereses del banco\" o \"Alquiler recibido\"; y otras donde hay entradas y salidas de dinero, como son las cuentas de los bancos, tarjetas, etc. Las etiquetas: se aplican a las cuentas, y permiten agrupar las cuentas para hacer los informes. Por ejemplo, podemos agrupar todas las cuentas de gastos bajo la etiqueta \"gastos\". Cada cuenta puede tener varias etiquetas. En cada movimiento o transacci\u00f3n sale o entra dinero de una cuenta. Salir significa que el dinero se resta del total que tiene la cuenta; entrar significa que se suma el dinero. La diferencia entre entradas y salidas se denomina el saldo de la cuenta. Cada movimiento consta del n\u00famero de asiento al que pertenece, la fecha, una descripci\u00f3n, los campos debe y haber , y la cuenta involucrada en el movimiento. En cada movimiento, s\u00f3lo uno de los campos debe o haber tiene un valor, y adem\u00e1s debe ser positivo; el otro vale 0. Si el campo debe es el que tiene el valor distinto de 0, significa que el dinero sale de la cuenta en ese movimiento; si es el campo haber , entonces el dinero entra a la cuenta. Estructura de las cuentas La estructura que se define de cuentas es muy importante para poder obtener informaci\u00f3n de los datos que entramos. Si esta estructura no es correcta, la informaci\u00f3n que obtenemos al hacer los informes no es interesante. Debemos tener el nivel de detalle adecuado: si agregamos muchos gastos en una sola cuenta, no sabremos bien c\u00f3mo se distribuyen los gastos o ingresos; si somos demasiado detallados, ser\u00e1 m\u00e1s dif\u00edcil obtener una fotos general de los gastos (aunque se pueden agrupar por etiquetas, no tiene demasiado sentido entrar en un sistema muy complejo). Vamos a definir 3 tipos de cuentas, como hemos comentado antes: las de gastos, las de ingresos, y las que llamo de balance , donde tenemos tanto entradas como salidas. Ingresos Estas son las m\u00e1s sencillas, ya que corresponden a las fuentes de ingresos que tenemos. Creamos una cuenta para cada fuente de ingresos, de esta forma podremos ver c\u00f3mo contribuye cada fuente a nuestro patrimonio. Ejemplos que encontramos en este apartado son: n\u00f3mina del lugar donde trabajamos. En caso de ser varias personas en la unidad familiar, crear una cuenta para cada uno. Y en caso de tener varios trabajos, tambi\u00e9n crear varias cuentas. intereses bancos. Se puede desglosar en varias cuentas (por banco, u otros criterios) si se quiere tener m\u00e1s detalle. regalos. Eso puede ser otra fuente de ingresos que queremos identificar. alquiler recibido. En caso de tener m\u00e1s de una propiedad en alquiler, tiene sentido crear una cuenta por propiedad. rendimiento fondos / acciones: esta cuenta deber\u00eda ser en general una cuenta de ingresos, aunque tambi\u00e9n puede tener p\u00e9rdidas. Se pueden varias, por ejemplo para separar rendimientos de acciones de los de fondos, o por banco, etc. A gusto de cada uno. Balance Estas cuentas tambi\u00e9n son relativamente sencillas, ya que deber\u00edan reflejar las cuentas y tarjetas que tengamos. En general hay que definir: una cuenta para cada cuenta bancaria que tenemos. De esta forma podremos comprobar despu\u00e9s el extracto del banco si corresponde a los movimientos que tenemos registrados. una cuenta para cada tarjeta de cr\u00e9dito. Ojo, las tarjetas de d\u00e9bito no, ya que estas cargan directamente a la cuenta del banco. Por tanto, pagar con una tarjeta de d\u00e9bito es equivalente a pagar con la cuenta asociada. Las tarjetas de cr\u00e9dito son las que pagan los gastos, y a final de mes reciben los fondos para quedarse a 0, cuando el banco nos carga el importe de la tarjeta (es decir, en ese momento el dinero pasa de una de las cuentas a la tarjeta) una cuenta para cada mecanismo de pago que tengamos, entendiendo los mecanismos como una forma de acumular dinero que luego puedo gastar. Por ejemplo: paypal, tarjetas via-T, tarjetas de pre-pago, botes para compartir gastos, etc. cada pr\u00e9stamo bancario o hipoteca deber\u00eda tener su cuenta asociada. De esta forma vemos c\u00faanto debemos, y c\u00f3mo se va reduciendo la deuda al hacer pagos. tambi\u00e9n puede ser interesante crear una cuenta para deudas (i.e. dinero que nos han prestado y deber\u00edamos devolver), y pr\u00e9stamos que hemos hecho (y esperamos que nos devuelvan). Tambi\u00e9n podr\u00eda ser la misma cuenta, aunque es m\u00e1s sencillo que est\u00e9n separadas. De esta forma podemos ver f\u00e1cilmente cu\u00e1nto dinero nos deben, y cu\u00e1nto debemos (igual que en el caso de la hipoteca). Cuando todas las deudas y pr\u00e9stamos est\u00e9n saldados, el saldo debe ser 0. Gastos Esta categor\u00eda es la m\u00e1s complicada y dif\u00edcil de definir, ya que depende mucho de la granularidad que se quiera tener. Por ejemplo, puedo definir una cuenta de gastos de viaje, que incluya todos los gastos; o bien cuentas distintas para gastos de transporte, gastos de alojamiento, gastos de comidas, gastos de visitas; o bien incluso dentro de transporte distinguir el medio de transporte (una cuenta para aviones, otra para tren, etc.). Se puede tener un nivel de granularidad distinto en cada cosa: quiz\u00e1s quiero tener mucho detalle en los viajes, porque hago muchos y luego puedo analizar c\u00f3mo he gastado el dinero; y menos detalle en los gastos m\u00e9dicos, y tener una sola cuenta para todos los gastos m\u00e9dicos (farmacia, consultas, ingresos hospital, vacunas, PCRs, etc.). Algunos ejemplos de cuentas pueden ser: gastos educaci\u00f3n gastos comida gastos ropa etc. Ejemplos Ejemplo 1. Compro un jersey Pongamos que compro un jersey con mi tarjeta, la transacci\u00f3n se representa con un asiento simple, es decir un asiento con dos movimientos: uno asociado a la cuenta de la tarjeta, con el valor del jersey en el debe (es decir, el dinero sale de la cuenta de la tarjeta), y otro movimiento asociado a la cuenta \"Ropa\" con el valor del jersey en el haber (el dinero entra en la cuenta \"Ropa\"). Cuando pida un informe de la cuenta \"Ropa\", podr\u00e9 ver todos los movimientos donde entra dinero en esa cuenta, y sumando sabr\u00e9 lo que me he gastado en ropa (por d\u00eda, por semana, por mes, etc.). Ejemplo 2. Hipoteca. Cuando compro un piso, pongamos que me cuesta 100.000\u20ac. Yo pago 20.000\u20ac de la cuenta de ahorro, y el banco me da una hipoteca por 80.000\u20ac. Esto se representa con un asiento complejo, de 3 movimientos: De la cuenta \"Cuenta Ahorro\" salen 20.000\u20ac, es decir tengo 20,000\u20ac en el debe (l\u00f3gicamente esto requerir\u00eda que la cuenta tuviera un saldo superior a 20.000\u20ac, pero eso no lo comprueba la aplicaci\u00f3n). De la cuenta \"Hipoteca\" salen 80.000\u20ac, por tanto tambi\u00e9n en el debe. Y tenemos 100.000\u20ac que entran a la cuenta \"Gastos casa\", por tanto en el haber. Tanto en el debe como en el haber tenemos un total de 100.000\u20ac. Ahora la cuenta \"Hipoteca\" tiene un saldo negativo de 80.000\u20ac. Eso es lo que debemos al banco. Cada mes iremos pagando la cuota de la hipoteca, lo cual ser\u00e1 otra vez un asiento complejo de 3 movimientos. Pongamos que la cuota es de 1.000 \u20ac: De la cuenta \"Cuenta N\u00f3mina\" salen 1.000\u20ac, es decir est\u00e1n en su debe A la cuenta \"Intereses hipoteca\" entran la parte de los intereses (que ser\u00e1 variable, ya que depende del inter\u00e9s de cada mes, y de la cantidad de capital restante). Pongamos que es 400\u20ac. Este valor ir\u00e1 en el haber. A la cuenta \"Hipoteca\" entrar\u00e1 la parte de capital, para ir amortizando la deuda que tengo pendiente. Por tanto pongo 600\u20ac en el haber. Ahora tengo tambi\u00e9n en el debe y en el haber la misma cantidad, 1.000\u20ac. Cuando pida un informe sobre la cuenta \"Hipoteca\", obtengo que ten\u00eda 80.000\u20ac en el debe, y 600\u20ac en el haber. Por tanto, mi saldo restante es de 79,400\u20ac. Es la deuda que tengo pendiente. A medida que pasen los meses, esa deuda se ir\u00e1 decrementando con la aportaci\u00f3n de las cuotas. Ejemplo 3. Saldo inicial Para que salgan bien las cuentas, debemos partir de un saldo inicial. Es decir, cuando empezamos a hacer la contabilidad, ya tengo alg\u00fan dinero en las cuentas del banco, algunos gastos hechos en mis tarjetas, quiz\u00e1s una hipoteca a medio pagar, y alg\u00fan fondo de inversi\u00f3n. Todo eso se puede definir en un asiento inicial, donde se pone el valor de cada una de las cuentas: El dinero que tengo en cuentas bancarias, paypal, tarjetas de prepago, etc. se pone en el haber de cada cuenta. El dinero que he gastado con mi tarjeta de cr\u00e9dito se pone en el debe de la cuenta correspondiente. En la cuenta \"Hipoteca\" se pone el valor de capital pendiente de amortizar en el debe. Los fondos de inversi\u00f3n, acciones, etc. tambi\u00e9n se a\u00f1ade su valor en la fecha inicial de empezar la contabilidad, y se pone en el haber. Para completar el asiento, se puede a\u00f1adir un movimiento a una cuenta \"Patrimonio inicial\", de forma que el total del debe y el haber de este asiento sean iguales. Esta cuenta nos indica cu\u00e1l es el valor neto de nuestro patrimonio al empezar la contabilidad, teniendo en cuenta todas las deudas, y todos los activos.","title":"Funcionamiento"},{"location":"manual_usuario/funcionamiento/#mecanismo-de-funcionamiento","text":"","title":"Mecanismo de funcionamiento"},{"location":"manual_usuario/funcionamiento/#teoria","text":"Esta aplicaci\u00f3n funciona con los mismos principios de contabilidad que pueda utilizar una empresa, pero de forma muy simplificada. B\u00e1sicamente, tenemos 3 tipos de informaci\u00f3n: Los movimientos: son las transacciones de dinero. Registran el movimiento de dinero entre dos o m\u00e1s cuentas. Los movimientos se agrupan por asiento, siendo cada asiento de uno o m\u00e1s movimientos. Las cuentas: son las que contienen el dinero. Puede haber cuentas de gastos, es decir que registran los gastos que tenemos, como por ejemplo: \"Gastos de la casa\", \"Comida\", \"Ropa\", o \"Viajes\"; otras cuentas de ingresos, como por ejemplo: \"N\u00f3mina del trabajo\", o \"Intereses del banco\" o \"Alquiler recibido\"; y otras donde hay entradas y salidas de dinero, como son las cuentas de los bancos, tarjetas, etc. Las etiquetas: se aplican a las cuentas, y permiten agrupar las cuentas para hacer los informes. Por ejemplo, podemos agrupar todas las cuentas de gastos bajo la etiqueta \"gastos\". Cada cuenta puede tener varias etiquetas. En cada movimiento o transacci\u00f3n sale o entra dinero de una cuenta. Salir significa que el dinero se resta del total que tiene la cuenta; entrar significa que se suma el dinero. La diferencia entre entradas y salidas se denomina el saldo de la cuenta. Cada movimiento consta del n\u00famero de asiento al que pertenece, la fecha, una descripci\u00f3n, los campos debe y haber , y la cuenta involucrada en el movimiento. En cada movimiento, s\u00f3lo uno de los campos debe o haber tiene un valor, y adem\u00e1s debe ser positivo; el otro vale 0. Si el campo debe es el que tiene el valor distinto de 0, significa que el dinero sale de la cuenta en ese movimiento; si es el campo haber , entonces el dinero entra a la cuenta.","title":"Teor\u00eda"},{"location":"manual_usuario/funcionamiento/#estructura-de-las-cuentas","text":"La estructura que se define de cuentas es muy importante para poder obtener informaci\u00f3n de los datos que entramos. Si esta estructura no es correcta, la informaci\u00f3n que obtenemos al hacer los informes no es interesante. Debemos tener el nivel de detalle adecuado: si agregamos muchos gastos en una sola cuenta, no sabremos bien c\u00f3mo se distribuyen los gastos o ingresos; si somos demasiado detallados, ser\u00e1 m\u00e1s dif\u00edcil obtener una fotos general de los gastos (aunque se pueden agrupar por etiquetas, no tiene demasiado sentido entrar en un sistema muy complejo). Vamos a definir 3 tipos de cuentas, como hemos comentado antes: las de gastos, las de ingresos, y las que llamo de balance , donde tenemos tanto entradas como salidas.","title":"Estructura de las cuentas"},{"location":"manual_usuario/funcionamiento/#ingresos","text":"Estas son las m\u00e1s sencillas, ya que corresponden a las fuentes de ingresos que tenemos. Creamos una cuenta para cada fuente de ingresos, de esta forma podremos ver c\u00f3mo contribuye cada fuente a nuestro patrimonio. Ejemplos que encontramos en este apartado son: n\u00f3mina del lugar donde trabajamos. En caso de ser varias personas en la unidad familiar, crear una cuenta para cada uno. Y en caso de tener varios trabajos, tambi\u00e9n crear varias cuentas. intereses bancos. Se puede desglosar en varias cuentas (por banco, u otros criterios) si se quiere tener m\u00e1s detalle. regalos. Eso puede ser otra fuente de ingresos que queremos identificar. alquiler recibido. En caso de tener m\u00e1s de una propiedad en alquiler, tiene sentido crear una cuenta por propiedad. rendimiento fondos / acciones: esta cuenta deber\u00eda ser en general una cuenta de ingresos, aunque tambi\u00e9n puede tener p\u00e9rdidas. Se pueden varias, por ejemplo para separar rendimientos de acciones de los de fondos, o por banco, etc. A gusto de cada uno.","title":"Ingresos"},{"location":"manual_usuario/funcionamiento/#balance","text":"Estas cuentas tambi\u00e9n son relativamente sencillas, ya que deber\u00edan reflejar las cuentas y tarjetas que tengamos. En general hay que definir: una cuenta para cada cuenta bancaria que tenemos. De esta forma podremos comprobar despu\u00e9s el extracto del banco si corresponde a los movimientos que tenemos registrados. una cuenta para cada tarjeta de cr\u00e9dito. Ojo, las tarjetas de d\u00e9bito no, ya que estas cargan directamente a la cuenta del banco. Por tanto, pagar con una tarjeta de d\u00e9bito es equivalente a pagar con la cuenta asociada. Las tarjetas de cr\u00e9dito son las que pagan los gastos, y a final de mes reciben los fondos para quedarse a 0, cuando el banco nos carga el importe de la tarjeta (es decir, en ese momento el dinero pasa de una de las cuentas a la tarjeta) una cuenta para cada mecanismo de pago que tengamos, entendiendo los mecanismos como una forma de acumular dinero que luego puedo gastar. Por ejemplo: paypal, tarjetas via-T, tarjetas de pre-pago, botes para compartir gastos, etc. cada pr\u00e9stamo bancario o hipoteca deber\u00eda tener su cuenta asociada. De esta forma vemos c\u00faanto debemos, y c\u00f3mo se va reduciendo la deuda al hacer pagos. tambi\u00e9n puede ser interesante crear una cuenta para deudas (i.e. dinero que nos han prestado y deber\u00edamos devolver), y pr\u00e9stamos que hemos hecho (y esperamos que nos devuelvan). Tambi\u00e9n podr\u00eda ser la misma cuenta, aunque es m\u00e1s sencillo que est\u00e9n separadas. De esta forma podemos ver f\u00e1cilmente cu\u00e1nto dinero nos deben, y cu\u00e1nto debemos (igual que en el caso de la hipoteca). Cuando todas las deudas y pr\u00e9stamos est\u00e9n saldados, el saldo debe ser 0.","title":"Balance"},{"location":"manual_usuario/funcionamiento/#gastos","text":"Esta categor\u00eda es la m\u00e1s complicada y dif\u00edcil de definir, ya que depende mucho de la granularidad que se quiera tener. Por ejemplo, puedo definir una cuenta de gastos de viaje, que incluya todos los gastos; o bien cuentas distintas para gastos de transporte, gastos de alojamiento, gastos de comidas, gastos de visitas; o bien incluso dentro de transporte distinguir el medio de transporte (una cuenta para aviones, otra para tren, etc.). Se puede tener un nivel de granularidad distinto en cada cosa: quiz\u00e1s quiero tener mucho detalle en los viajes, porque hago muchos y luego puedo analizar c\u00f3mo he gastado el dinero; y menos detalle en los gastos m\u00e9dicos, y tener una sola cuenta para todos los gastos m\u00e9dicos (farmacia, consultas, ingresos hospital, vacunas, PCRs, etc.). Algunos ejemplos de cuentas pueden ser: gastos educaci\u00f3n gastos comida gastos ropa etc.","title":"Gastos"},{"location":"manual_usuario/funcionamiento/#ejemplos","text":"","title":"Ejemplos"},{"location":"manual_usuario/funcionamiento/#ejemplo-1-compro-un-jersey","text":"Pongamos que compro un jersey con mi tarjeta, la transacci\u00f3n se representa con un asiento simple, es decir un asiento con dos movimientos: uno asociado a la cuenta de la tarjeta, con el valor del jersey en el debe (es decir, el dinero sale de la cuenta de la tarjeta), y otro movimiento asociado a la cuenta \"Ropa\" con el valor del jersey en el haber (el dinero entra en la cuenta \"Ropa\"). Cuando pida un informe de la cuenta \"Ropa\", podr\u00e9 ver todos los movimientos donde entra dinero en esa cuenta, y sumando sabr\u00e9 lo que me he gastado en ropa (por d\u00eda, por semana, por mes, etc.).","title":"Ejemplo 1. Compro un jersey"},{"location":"manual_usuario/funcionamiento/#ejemplo-2-hipoteca","text":"Cuando compro un piso, pongamos que me cuesta 100.000\u20ac. Yo pago 20.000\u20ac de la cuenta de ahorro, y el banco me da una hipoteca por 80.000\u20ac. Esto se representa con un asiento complejo, de 3 movimientos: De la cuenta \"Cuenta Ahorro\" salen 20.000\u20ac, es decir tengo 20,000\u20ac en el debe (l\u00f3gicamente esto requerir\u00eda que la cuenta tuviera un saldo superior a 20.000\u20ac, pero eso no lo comprueba la aplicaci\u00f3n). De la cuenta \"Hipoteca\" salen 80.000\u20ac, por tanto tambi\u00e9n en el debe. Y tenemos 100.000\u20ac que entran a la cuenta \"Gastos casa\", por tanto en el haber. Tanto en el debe como en el haber tenemos un total de 100.000\u20ac. Ahora la cuenta \"Hipoteca\" tiene un saldo negativo de 80.000\u20ac. Eso es lo que debemos al banco. Cada mes iremos pagando la cuota de la hipoteca, lo cual ser\u00e1 otra vez un asiento complejo de 3 movimientos. Pongamos que la cuota es de 1.000 \u20ac: De la cuenta \"Cuenta N\u00f3mina\" salen 1.000\u20ac, es decir est\u00e1n en su debe A la cuenta \"Intereses hipoteca\" entran la parte de los intereses (que ser\u00e1 variable, ya que depende del inter\u00e9s de cada mes, y de la cantidad de capital restante). Pongamos que es 400\u20ac. Este valor ir\u00e1 en el haber. A la cuenta \"Hipoteca\" entrar\u00e1 la parte de capital, para ir amortizando la deuda que tengo pendiente. Por tanto pongo 600\u20ac en el haber. Ahora tengo tambi\u00e9n en el debe y en el haber la misma cantidad, 1.000\u20ac. Cuando pida un informe sobre la cuenta \"Hipoteca\", obtengo que ten\u00eda 80.000\u20ac en el debe, y 600\u20ac en el haber. Por tanto, mi saldo restante es de 79,400\u20ac. Es la deuda que tengo pendiente. A medida que pasen los meses, esa deuda se ir\u00e1 decrementando con la aportaci\u00f3n de las cuotas.","title":"Ejemplo 2. Hipoteca."},{"location":"manual_usuario/funcionamiento/#ejemplo-3-saldo-inicial","text":"Para que salgan bien las cuentas, debemos partir de un saldo inicial. Es decir, cuando empezamos a hacer la contabilidad, ya tengo alg\u00fan dinero en las cuentas del banco, algunos gastos hechos en mis tarjetas, quiz\u00e1s una hipoteca a medio pagar, y alg\u00fan fondo de inversi\u00f3n. Todo eso se puede definir en un asiento inicial, donde se pone el valor de cada una de las cuentas: El dinero que tengo en cuentas bancarias, paypal, tarjetas de prepago, etc. se pone en el haber de cada cuenta. El dinero que he gastado con mi tarjeta de cr\u00e9dito se pone en el debe de la cuenta correspondiente. En la cuenta \"Hipoteca\" se pone el valor de capital pendiente de amortizar en el debe. Los fondos de inversi\u00f3n, acciones, etc. tambi\u00e9n se a\u00f1ade su valor en la fecha inicial de empezar la contabilidad, y se pone en el haber. Para completar el asiento, se puede a\u00f1adir un movimiento a una cuenta \"Patrimonio inicial\", de forma que el total del debe y el haber de este asiento sean iguales. Esta cuenta nos indica cu\u00e1l es el valor neto de nuestro patrimonio al empezar la contabilidad, teniendo en cuenta todas las deudas, y todos los activos.","title":"Ejemplo 3. Saldo inicial"},{"location":"manual_usuario/informes/","text":"Informes La plantalla de Informes tiene dos partes: a la izquierda tenemos el men\u00fa para entrar los par\u00e1metros para la generaci\u00f3n del informe. a la derecha es donde veremos el informe generado. Se genera un gr\u00e1fico, y se proporciona la tabla con los datos. Par\u00e1metros Los par\u00e1metros que se utilizan para los informes son los siguientes: Rango de fechas (fecha inicial y final): solo se contemplar\u00e1n los movimientos entre estas dos fechas. En caso de no proporcionarse alguna de ellas, se asume que no hay l\u00edmite de fecha inicial, final o ambas. Tipo de informe: puede ser diario, semanal, mensual, trimestral, o anual. Indica c\u00f3mo se agregan los datos. Por ejemplo, en un informe semanal los datos se agregan por semanas, es decir se suman los valores de debe y haber en cada semana. Cuenta: permite limitar el informe a los movimientos de una sola cuenta. Si el par\u00e1metro se deja en blanco, se tendr\u00e1 en cuenta la etiqueta, y si ambos est\u00e1n en blanco se har\u00e1 el informe sobre todas las cuentas. Etiqueta: permite limitar el informe a los movimientos de las cuentas que tienen esta etiqueta \u00fanicamente. Este par\u00e1metro s\u00f3lo se tiene en cuenta si el par\u00e1metro Cuenta est\u00e1 en blanco. Para generar el informe se pulsa el bot\u00f3n verde. El bot\u00f3n rojo permite resetear los par\u00e1metros del informe. Al generar un informe se mantienen los par\u00e1metros, de forma que se pueden ir ajustando hasta obtener el resultado esperado. Si cambiamos de pantalla los par\u00e1metros se pierden, y al volver empezamos con todos los par\u00e1metros en blanco. Resultado informe Esta pantalla muestra el resultado del informe. Este se muestra en dos partes: La primera es un gr\u00e1fico de barras mostrando los valores, en funci\u00f3n de la agregaci\u00f3n escogida. Se genera tambi\u00e9n un t\u00edtulo en funci\u00f3n de los par\u00e1metros escogidos, de forma que podamos saber en cualquier momento qu\u00e9 par\u00e1metros se han utilizado. La segunda parte es la tabla correspondiente a los datos mostrados.","title":"Informes"},{"location":"manual_usuario/informes/#informes","text":"La plantalla de Informes tiene dos partes: a la izquierda tenemos el men\u00fa para entrar los par\u00e1metros para la generaci\u00f3n del informe. a la derecha es donde veremos el informe generado. Se genera un gr\u00e1fico, y se proporciona la tabla con los datos.","title":"Informes"},{"location":"manual_usuario/informes/#parametros","text":"Los par\u00e1metros que se utilizan para los informes son los siguientes: Rango de fechas (fecha inicial y final): solo se contemplar\u00e1n los movimientos entre estas dos fechas. En caso de no proporcionarse alguna de ellas, se asume que no hay l\u00edmite de fecha inicial, final o ambas. Tipo de informe: puede ser diario, semanal, mensual, trimestral, o anual. Indica c\u00f3mo se agregan los datos. Por ejemplo, en un informe semanal los datos se agregan por semanas, es decir se suman los valores de debe y haber en cada semana. Cuenta: permite limitar el informe a los movimientos de una sola cuenta. Si el par\u00e1metro se deja en blanco, se tendr\u00e1 en cuenta la etiqueta, y si ambos est\u00e1n en blanco se har\u00e1 el informe sobre todas las cuentas. Etiqueta: permite limitar el informe a los movimientos de las cuentas que tienen esta etiqueta \u00fanicamente. Este par\u00e1metro s\u00f3lo se tiene en cuenta si el par\u00e1metro Cuenta est\u00e1 en blanco. Para generar el informe se pulsa el bot\u00f3n verde. El bot\u00f3n rojo permite resetear los par\u00e1metros del informe. Al generar un informe se mantienen los par\u00e1metros, de forma que se pueden ir ajustando hasta obtener el resultado esperado. Si cambiamos de pantalla los par\u00e1metros se pierden, y al volver empezamos con todos los par\u00e1metros en blanco.","title":"Par\u00e1metros"},{"location":"manual_usuario/informes/#resultado-informe","text":"Esta pantalla muestra el resultado del informe. Este se muestra en dos partes: La primera es un gr\u00e1fico de barras mostrando los valores, en funci\u00f3n de la agregaci\u00f3n escogida. Se genera tambi\u00e9n un t\u00edtulo en funci\u00f3n de los par\u00e1metros escogidos, de forma que podamos saber en cualquier momento qu\u00e9 par\u00e1metros se han utilizado. La segunda parte es la tabla correspondiente a los datos mostrados.","title":"Resultado informe"}]}